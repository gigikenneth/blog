<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Pharmaverse Blog</title>
<link>https://pharmaverse.github.io/blog/index.html</link>
<atom:link href="https://pharmaverse.github.io/blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Tue, 08 Aug 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>It’s all relative? - Calculating Relative Days using admiral</title>
  <dc:creator>Ben Straub</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-08-08_study_day/study_day.html</link>
  <description><![CDATA[ 




<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Creating <code>--DY</code> variables for your ADaMs is super easy using <a href="https://pharmaverse.github.io/admiral/v0.11.1/reference/derive_vars_dy.html"><code>derive_vars_dy()</code></a> from the <a href="https://pharmaverse.github.io/admiral/cran-release/">admiral package</a>.</p>
<p>Let’s build some dummy data with 4 subjects, a start date/time for treatment (<code>TRTSDTM</code>), an analysis start date/time variable (<code>ASTDTM</code>) and an analysis end date variable (<code>AENDT</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(admiral)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"></span>
<span id="cb1-5">adam <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb1-6">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>USUBJID, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>TRTSDTM, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>ASTDTM, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>AENDT,</span>
<span id="cb1-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"001"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-01-17T23:59:59"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-01-18T13:09:O9"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-01-20"</span>,</span>
<span id="cb1-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"002"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-02-25T23:59:59"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-03-18T14:09:O9"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-03-24"</span>,</span>
<span id="cb1-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"003"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-02-12T23:59:59"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-02-18T11:03:O9"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-04-17"</span>,</span>
<span id="cb1-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"004"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-03-17T23:59:59"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-03-19T13:09:O9"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-05-04"</span></span>
<span id="cb1-11">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb1-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">TRTSDTM =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_datetime</span>(TRTSDTM),</span>
<span id="cb1-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ASTDTM =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_datetime</span>(ASTDTM),</span>
<span id="cb1-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">AENDT =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(AENDT)</span>
<span id="cb1-16">  )</span></code></pre></div>
</div>
<p>Okay! Next we run our dataset through <code>derive_vars_dy()</code>, specifying:</p>
<ul>
<li>the reference date of the variable we want the calculation to be done against (<code>reference_date</code> argument);</li>
<li>the variables required to help calculate the relative days (<code>source_vars</code> argument).</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_vars_dy</span>(</span>
<span id="cb2-2">  adam,</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">reference_date =</span> TRTSDTM,</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">source_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(ASTDTM, AENDT)</span>
<span id="cb2-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 6
  USUBJID TRTSDTM             ASTDTM              AENDT      ASTDY AENDY
  &lt;chr&gt;   &lt;dttm&gt;              &lt;dttm&gt;              &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt;
1 001     2014-01-17 23:59:59 2014-01-18 13:09:09 2014-01-20     2     4
2 002     2014-02-25 23:59:59 2014-03-18 14:09:09 2014-03-24    22    28
3 003     2014-02-12 23:59:59 2014-02-18 11:03:09 2014-04-17     7    65
4 004     2014-03-17 23:59:59 2014-03-19 13:09:09 2014-05-04     3    49</code></pre>
</div>
</div>
<p>That’s it! We got both our <code>ASTDY</code> and <code>AENDY</code> variables in only a few short lines of code!</p>
<p>What if I want my variables to have a different naming convention?</p>
<p>Easy! In the <code>source_vars</code> argument if you want your variables to be called <code>DEMOADY</code> and <code>DEMOEDY</code> just do <code>DEMOADY = ASTDTM</code> and <code>DEMOEDY = AENDT</code> and <code>derive_vars_dy()</code> will do the rest!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_vars_dy</span>(</span>
<span id="cb4-2">  adam,</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">reference_date =</span> TRTSDTM,</span>
<span id="cb4-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">source_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DEMOADY =</span> ASTDTM, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DEMOEDY =</span> AENDT)</span>
<span id="cb4-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 6
  USUBJID TRTSDTM             ASTDTM              AENDT      DEMOADY DEMOEDY
  &lt;chr&gt;   &lt;dttm&gt;              &lt;dttm&gt;              &lt;date&gt;       &lt;dbl&gt;   &lt;dbl&gt;
1 001     2014-01-17 23:59:59 2014-01-18 13:09:09 2014-01-20       2       4
2 002     2014-02-25 23:59:59 2014-03-18 14:09:09 2014-03-24      22      28
3 003     2014-02-12 23:59:59 2014-02-18 11:03:09 2014-04-17       7      65
4 004     2014-03-17 23:59:59 2014-03-19 13:09:09 2014-05-04       3      49</code></pre>
</div>
</div>
<p>If you want to get <code>--DT</code> or <code>--DTM</code> variables using <code>admiral</code> then check out <a href="https://pharmaverse.github.io/admiral/cran-release/reference/derive_vars_dt.html"><code>derive_vars_dt()</code></a> and <a href="https://pharmaverse.github.io/admiral/cran-release/reference/derive_vars_dtm.html"><code>derive_vars_dtm()</code></a>. If things are messy in your data, e.g.&nbsp;partial dates, both functions have great imputation abilities, which we will cover in an upcoming blog post!</p>
<!--------------- appendices go here ----------------->
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2023-08-08 12:54:53.370004</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-08-08_study_day/code_sections.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-08-08_study_day/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{straub2023,
  author = {Straub, Ben},
  title = {It’s All Relative? - {Calculating} {Relative} {Days} Using
    Admiral},
  date = {2023-08-08},
  url = {https://pharmaverse.github.io/blog/posts/2023-08-08_study_day/study_day.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-straub2023" class="csl-entry quarto-appendix-citeas">
Straub, Ben. 2023. <span>“It’s All Relative? - Calculating Relative Days
Using Admiral.”</span> August 8, 2023. <a href="https://pharmaverse.github.io/blog/posts/2023-08-08_study_day/study_day.html">https://pharmaverse.github.io/blog/posts/2023-08-08_study_day/study_day.html</a>.
</div></div></section></div> ]]></description>
  <category>admiral</category>
  <category>ADaMs</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-08-08_study_day/study_day.html</guid>
  <pubDate>Tue, 08 Aug 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-08-08_study_day/admiral.png" medium="image" type="image/png" height="108" width="144"/>
</item>
<item>
  <title>Cross-Industry Open Source Package Development</title>
  <dc:creator>Stefan Thoma</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-07-20_cross_company_dev/cross_industry_dev.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>This post is based on <a href="https://stefanthoma.github.io/useR_2023_admiral/#/title-slide">a talk</a> given at the <a href="https://user-regional-2023.gitlab.io/basel/">regional useR! conference on July 21st 2023 in Basel</a>. I took the opportunity to present my personal perspective on the current cross-industry package development efforts with a particular focus on the transformation of the job description of statistical programmers. As I have only recently started my position at Roche, my personal perspective is the perspective of a newcomer. I have a background in Psychology and Statistics and joined Roche in November 2022 as an intern switching to a permanent position as a statistical programmer – what they call analytical data scientist now – in April 2023. I spend about 20% of my time in such a cross-industry package development project, which was a major reason for applying for this position. In this post I would like to explain how we work in this project, and why this had such an impact on my decision to join Roche.</p>
<section id="context" class="level2">
<h2 class="anchored" data-anchor-id="context">Context</h2>
<p>My decision was influenced by two current industry trends:</p>
<p>First, the switch to a more language agnostic and open source approach for clinical reporting and data analysis. At the moment, R seems to be the best fitting tool for the job, but the systems used here are language agnostic in general. This is related, but does not necessarily lead to the second trend: The move toward cross-industry collaboration when developing clinical reporting software.</p>
<p>As the industry moves toward new (to them) programming languages, fit-for-purpose tools need(ed) to be developed. The realization that siloed solutions – in an area where competitiveness does not benefit patients – are simply resource hungry ways to solve the same problem in parallel provided a great argument for a shift toward collaborations.</p>
<p>Such cross-industry collaborations gave rise to the pharmaverse, a curated collection of R packages designed to solve clinical reporting in R. <a href="https://github.com/pharmaverse/admiral">{admiral}</a>, the project that I work on, is part of the <a href="https://pharmaverse.org/">pharmaverse</a> and covers the creation of ADaM data sets (CDISC standard data). These data sets are subsequently used to produce tables, listings, and graphs and are usually part of the submission package for regulators.<br>
<!-- You can read about the inception of [{admiral}](https://github.com/pharmaverse/admiral) in [this recent blog post by ...](). --></p>
</section>
<section id="insights" class="level2">
<h2 class="anchored" data-anchor-id="insights">Insights</h2>
<p>When creating an open source package in an industry where currently there is a lot of traction you have to move fast. No, I don’t mean: Move fast and break things. I mean: Communicate! Get people on board! We aimed <a href="https://github.com/pharmaverse/admiral">{admiral}</a> to be <strong>the</strong> package for ADaM creation even before deciding to create the package together with GSK. By being transparent about our endeavor, e.g.&nbsp;Thomas Neitmann (then at Roche) posting on LinkedIn, we managed to connect with Michael Rimler from GSK and soon realized that we were dealing with the exact same challenge at both companies, and that a collaborative effort would improve the final product while reducing individual efforts. A working prototype of <a href="https://github.com/pharmaverse/admiral">{admiral}</a> was to be created by GSK and Roche within six months, and would then be open sourced. In our effort to communicate openly, we informed statistical programmers from over 20 companies about the <a href="https://github.com/pharmaverse/admiral">{admiral}</a> project and invited them to try it out and provide feedback once released. In the end, we received over 500 comments from over 50 programmers.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check out the latest admiral release from CRAN:</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"admiral"</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(admiral)</span></code></pre></div>
</div>
<p>This was instrumental in creating a product that was optimised for general usage in the clinical reporting field and ensured that other companies would not unknowingly invest into their own solution to this challenge. Open sourcing early is particularly beneficial because this ensures from the get-go that code created is aimed at a general audience, and not company specific (perhaps by accident).</p>
<p><a href="https://github.com/pharmaverse/admiral">{admiral}</a> was created with the long term goal of having a stable and flexible solution for the clinical reporting pipeline. In that spirit, its permissive <a href="https://www.apache.org/licenses/LICENSE-2.0">apache 2.0 licence</a> (jointly owned by Roche and GSK) further strengthens trust into the project, namely for three reasons:</p>
<ul>
<li><p>Jointly owned means that efforts to monetize the code-base by one company could be vetoed by the other. The permissive licence ensures that in such an unlikely case, the code-base that has been published would stay available and could always be used and improved upon by others.</p></li>
<li><p>Having this package backed by Roche and GSK ensures (as far as this is ever possible) funding for properly maintaining the packages. This is crucial, as a package is rarely <strong>finished</strong>.</p></li>
<li><p>Up to now, experts from many more companies have joined <a href="https://github.com/pharmaverse/admiral">{admiral}</a> or one of its therapeutic area specific package-extensions, inspiring even more trust into its reliability.</p></li>
</ul>
<p>If you would like to learn more about licenses for open source projects in the clinical reporting world please check out the <a href="https://phuse-org.github.io/E2E-OS-Guidance/">recent PHUSE E2E Guidance on open source license</a></p>
</section>
<section id="development-workflow" class="level2">
<h2 class="anchored" data-anchor-id="development-workflow">Development workflow</h2>
<p>Every improvement, task, or feature we want to implement on <a href="https://github.com/pharmaverse/admiral">{admiral}</a> starts as an issue on our <a href="https://github.com/pharmaverse/admiral">GitHub repository</a>. It is the centerpiece of our development workflow, along with our <a href="https://pharmaverse.github.io/admiraldev/devel/articles/development_process.html">developer guides</a> which describe in detail the strategies, conventions, and workflows used in development. The guides help us keep the <a href="https://github.com/pharmaverse/admiral">{admiral}</a> package internally consistent (e.g.&nbsp;naming conventions, function logic) but also ensure that <a href="https://github.com/pharmaverse/admiral">{admiral}</a> adjacent packages follow the same conventions and share the user interface. This is further helped by the implemented CICD pipeline which ensures styling convention and spelling (and much more).</p>
<p>The core package developers team meets once a week (twice a week before a release) to discuss progress and priorities. Here, the role of product lead (currently <a href="https://www.linkedin.com/in/edoardo-mancini-7a4a40148/">Edoardo Mancini</a> at Roche) and technical lead (currently <a href="https://www.linkedin.com/in/ben-straub/">Ben Straub</a> at GSK) is to set priorities and track the release schedule. These stand-up meetings are centered around the <a href="https://github.com/orgs/pharmaverse/projects/12">project-board</a> which gives a complete overview of activities and progress. Issues are mostly self-assigned so developers can really chose what they want to work on.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-07-20_cross_company_dev/project_board.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">GitHub project board</figcaption>
</figure>
</div>
<p>By design, <a href="https://github.com/pharmaverse/admiral">{admiral}</a> is community built. Most developers working on the project are statistical programmers working on clinical reporting themselves. As an open source project, community input is highly valued, and anyone using <a href="https://github.com/pharmaverse/admiral">{admiral}</a> is encouraged to submit issues or take on issues as part of the development team. We also do occasional events to bring the statistical programmers community and the developers closer together. Just last February we organised the <a href="https://github.com/pharmaverse/admiral">{admiral}</a> hackathon which had up to 500 participants.</p>
</section>
<section id="impact" class="level2">
<h2 class="anchored" data-anchor-id="impact">Impact</h2>
<p>For Roche, cross-industry package development work out in their favor: They get access to software created by specialists and users from across the industry but paying only a fraction of the developmental costs. Of course, they don’t have total developmental control but they do get a seat at the table. Any gaps between the open source <a href="https://github.com/pharmaverse/admiral">{admiral}</a> package and the proprietary Roche workflow were bridged by the internal {admiralroche} package.</p>
<p>The switch towards a more language agnostic platform, and open source languages specifically, opens the door to a broad population of university graduates with diverse backgrounds. I personally would not have considered this position five years ago due to a misalignment of skills and job requirements. Working towards an industry standard open source solution will also ensure that skills learned at one company are more easily transferable to external positions, further making the position much more attractive. Access to such a broad pool of potential candidates is clearly beneficial for recruitment at Roche, but also facilitates diversity in teams which makes for a more interesting and effective work place.</p>
<p>Open source development comes with much more transparency by definition. Recognition of contributions are built in - anyone can see who did what. This recognition escapes the confines of your company as it is visible to anyone looking at the repository. Anyone can not only see at any time what is being worked on, what discussions are happening and which direction is being taken, but can also participate and contribute. Transparency also applies to errors in the code and how the team is dealing with them. In such an environment it is practically impossible to hide or cover up errors and corrections. Instead, they have to be dealt with publicly and in the open. This openness about errors also helps seeing errors as a natural occurrence that needs to be dealt with. Space for errors encourages learning and is really beneficial for growing both skills and integrity.</p>
<p>As you work on a team that spans multiple companies, traditional corporate hierarchies do not apply. Of course, there will always be a sort of hierarchy of experience or skills, but these work in your favor: You will know who to ask for help, and teams are generally very happy for contributors of any skill level. Contributions also need not be in code: Inputs into discussions and domain knowledge contributions are highly valued as well. The flip-side of working in a team without your manager oversight: They may not be directly aware of the work you do. That’s why you have to write blog posts :)</p>
<p>The possibility for statistical programmers to pivot towards developing software or writing blog-posts such as this really transforms and broadens their job description. It is this transformation that is reflected by the choice of Roche to re-brand statistical programmers as analytical data scientists. The fact that cross-industry development is being advocated for really lets programmers expand their network outside of their company.</p>
<p>The <a href="https://github.com/pharmaverse/admiral">{admiral}</a> project serves as a testament to the power of collaborative open-source development and the potential it holds for the future of work in this industry.</p>
<!--------------- appendices go here ----------------->


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{thoma2023,
  author = {Thoma, Stefan},
  title = {Cross-Industry {Open} {Source} {Package} {Development}},
  date = {2023-07-25},
  url = {https://pharmaverse.github.io/blog/posts/2023-07-20_cross_company_dev/cross_industry_dev.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-thoma2023" class="csl-entry quarto-appendix-citeas">
Thoma, Stefan. 2023. <span>“Cross-Industry Open Source Package
Development.”</span> July 25, 2023. <a href="https://pharmaverse.github.io/blog/posts/2023-07-20_cross_company_dev/cross_industry_dev.html">https://pharmaverse.github.io/blog/posts/2023-07-20_cross_company_dev/cross_industry_dev.html</a>.
</div></div></section></div> ]]></description>
  <category>community</category>
  <category>admiral</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-07-20_cross_company_dev/cross_industry_dev.html</guid>
  <pubDate>Tue, 25 Jul 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-07-20_cross_company_dev/Rbasel.png" medium="image" type="image/png" height="108" width="144"/>
</item>
<item>
  <title>How to use Code Sections</title>
  <dc:creator>Edoardo Mancini</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-07-14_code_sections/code_sections.html</link>
  <description><![CDATA[ 




<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The <a href="https://pharmaverse.github.io/admiral/cran-release/"><code>admiral</code></a> package embraces a modular style of programming, where blocks of code are pieced together in sequence to create an ADaM dataset. However, with the well-documented advantages of the modular approach comes the recognition that scripts will on average be longer. As such, astute programmers working in RStudio are constantly on the lookout for quick ways to effectively navigate their scripts. Enter <strong>code sections</strong>!</p>
</section>
<section id="so-what-are-code-sections-and-why-are-they-useful" class="level2">
<h2 class="anchored" data-anchor-id="so-what-are-code-sections-and-why-are-they-useful">So, what are code sections and why are they useful?</h2>
<p><a href="https://docs.posit.co/ide/user/ide/guide/code/code-sections.html">Code Sections</a> are separators for long R scripts or functions in RStudio. They can be set up by inserting a comment line followed by four or more dashes in between portions of code, like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First code section ----</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Second code section ----</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Third code section ----</span></span>
<span id="cb1-10"></span>
<span id="cb1-11">c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
</div>
<p>RStudio then recognizes the code sections automatically, and enables you to:</p>
<ul>
<li>Collapse and expand them using the arrow displayed next to the line number, or with the handy shortcuts <code>Alt+L</code>/<code>Shift+Alt+L</code> on Windows or <code>Cmd+Option+L</code>/<code>Cmd+Shift+Option+L</code> on Mac.</li>
<li>Travel in between them using the navigator at the bottom of the code pane, or by pressing <code>Shift+Alt+J</code> on Windows or <code>Cmd+Shift+Option+J</code> on Mac.</li>
<li>View an outline of the file using the “Outline” button at the top right of the pane and/or the orange hashtag “Section Navigator” button at the bottom left of the pane.</li>
</ul>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-07-14_code_sections/section_navigator.png" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption class="figure-caption">Collapsed sections, outline view and the section navigator for the example above.</figcaption>
</figure>
</div>
</div>
</div>
<p>It is also possible to create subsections by using two hashtags at the start of a comment line:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First code section ----</span></span>
<span id="cb2-2">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## A code subsection ----</span></span>
<span id="cb2-5">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Second code section ----</span></span>
<span id="cb2-8">c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-07-14_code_sections/subsections.png" class="img-fluid figure-img" style="width:45.0%"></p>
<figcaption class="figure-caption">Code subsections for the example above.</figcaption>
</figure>
</div>
</div>
</div>
<p>For a complete list of Code Sections shortcuts, and for further information, see <a href="https://docs.posit.co/ide/user/ide/guide/code/code-sections.html#menu-commands-and-shortcuts">here</a>.</p>
</section>
<section id="code-sections-on-admiral" class="level1">
<h1>Code Sections on <code>admiral</code></h1>
<p>Within the <a href="https://pharmaverse.github.io/admiral/cran-release/"><code>admiral</code></a> package, heavy use of code sections is made in scripts such as our template ADaM programs. This ensures that they are more traversable and also encourages good commenting practices throughout the program. Here is an example using the ADAE template program:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(admiral)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_ad_template</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADAE"</span>)</span></code></pre></div>
</div>
<p>Once the user saves this template program and opens it in their local file system, a 100+ line file instantly becomes more tractable due to the code sections that have been inserted.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-07-14_code_sections/adae_code_sections.png" class="img-fluid figure-img" style="width:45.0%"></p>
<figcaption class="figure-caption">A screenshot of the code sections in the ADAE template script</figcaption>
</figure>
</div>
</div>
</div>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Code sections are an easy way to navigate long scripts and foster good commenting practices. They are used extensively in the <a href="https://pharmaverse.github.io/admiral/cran-release/"><code>admiral</code></a> package, but there is no reason that you cannot start using them yourself in your day-to-day R programming!</p>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2023-08-08 12:54:40.832809</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-07-14_code_sections/code_sections.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-07-14_code_sections/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{mancini2023,
  author = {Mancini, Edoardo},
  title = {How to Use {Code} {Sections}},
  date = {2023-07-14},
  url = {https://pharmaverse.github.io/blog/posts/2023-07-14_code_sections/code_sections.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-mancini2023" class="csl-entry quarto-appendix-citeas">
Mancini, Edoardo. 2023. <span>“How to Use Code Sections.”</span> July
14, 2023. <a href="https://pharmaverse.github.io/blog/posts/2023-07-14_code_sections/code_sections.html">https://pharmaverse.github.io/blog/posts/2023-07-14_code_sections/code_sections.html</a>.
</div></div></section></div> ]]></description>
  <category>ADaMs</category>
  <category>Tips and Tricks</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-07-14_code_sections/code_sections.html</guid>
  <pubDate>Fri, 14 Jul 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-07-14_code_sections/rstudio-hex.PNG" medium="image"/>
</item>
<item>
  <title>Blanks and NAs</title>
  <dc:creator>Ben Straub</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-07-10_blanks_and_nas/blanks_and_nas.html</link>
  <description><![CDATA[ 




<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Reading in SAS-based datasets (<code>.sas7bdat</code> or <code>xpt</code>) into R has users calling the R package <a href="https://haven.tidyverse.org/">haven</a>. A typical call might invoke <code>read_sas()</code> or <code>read_xpt()</code> to bring in your source data to construct your ADaMs or SDTMs.</p>
<p>Unfortunately, while using <a href="https://haven.tidyverse.org/">haven</a> the character blanks (missing data) found in a typical SAS-based dataset are left as blanks. These blanks will typically prove problematic while using functions like <code>is.na</code> in combination with <code>dplyr::filter()</code> to subset data. Check out <a href="https://bayer-group.github.io/sas2r/r-and-sas-syntax.html#handling-of-missing-values">Bayer’s SAS2R catalog: handling-of-missing-values</a> for more discussion on missing values and <code>NAs</code>.</p>
<p>In the <a href="https://pharmaverse.github.io/admiral/cran-release/">admiral</a> package, we have built a simple function called <code>convert_blanks_to_na()</code> to help us quickly remedy this problem. You can supply an entire dataframe to this function and it will convert any character blanks to <code>NA_character_</code></p>
<section id="loading-packages-and-making-dummy-data" class="level2">
<h2 class="anchored" data-anchor-id="loading-packages-and-making-dummy-data">Loading Packages and Making Dummy Data</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(admiral)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"></span>
<span id="cb1-5">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb1-6">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>USUBJID, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>RFICDTC,</span>
<span id="cb1-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2000-01-01"</span>,</span>
<span id="cb1-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"02"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2001-01-01"</span>,</span>
<span id="cb1-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"03"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Here we have a character blank</span></span>
<span id="cb1-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"04"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2001-01--"</span>,</span>
<span id="cb1-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"05"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2001---01"</span>,</span>
<span id="cb1-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"05"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Here we have a character blank</span></span>
<span id="cb1-13">)</span>
<span id="cb1-14"></span>
<span id="cb1-15">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
  USUBJID RFICDTC     
  &lt;chr&gt;   &lt;chr&gt;       
1 01      "2000-01-01"
2 02      "2001-01-01"
3 03      ""          
4 04      "2001-01--" 
5 05      "2001---01" 
6 05      ""          </code></pre>
</div>
</div>
</section>
<section id="a-simple-conversion" class="level2">
<h2 class="anchored" data-anchor-id="a-simple-conversion">A simple conversion</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">df_na <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convert_blanks_to_na</span>(df)</span>
<span id="cb3-2"></span>
<span id="cb3-3">df_na</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
  USUBJID RFICDTC   
  &lt;chr&gt;   &lt;chr&gt;     
1 01      2000-01-01
2 02      2001-01-01
3 03      &lt;NA&gt;      
4 04      2001-01-- 
5 05      2001---01 
6 05      &lt;NA&gt;      </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">df_na <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(RFICDTC))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 2
  USUBJID RFICDTC
  &lt;chr&gt;   &lt;chr&gt;  
1 03      &lt;NA&gt;   
2 05      &lt;NA&gt;   </code></pre>
</div>
</div>
</section>
<section id="thats-it" class="level2">
<h2 class="anchored" data-anchor-id="thats-it">That’s it!</h2>
<p>A simple call to this function can make your derivation life so much easier while working in R if working with SAS-based datasets. In <a href="https://pharmaverse.github.io/admiral/cran-release/">admiral</a>, we make use of this function at the start of all ADaM templates for common ADaM datasets. You can use the function <code>use_ad_template()</code> to get the full R script for the below ADaMs.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_all_templates</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Existing ADaM templates in package 'admiral':
• ADAE
• ADCM
• ADEG
• ADEX
• ADLB
• ADLBHY
• ADMH
• ADPC
• ADPP
• ADPPK
• ADSL
• ADVS</code></pre>
</div>
</div>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2023-08-08 12:54:43.505435</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-07-10_blanks_and_nas/blanks_and_na.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-07-10_blanks_and_nas/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{straub2023,
  author = {Straub, Ben},
  title = {Blanks and {NAs}},
  date = {2023-07-10},
  url = {https://pharmaverse.github.io/blog/posts/2023-07-10_blanks_and_nas/blanks_and_nas.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-straub2023" class="csl-entry quarto-appendix-citeas">
Straub, Ben. 2023. <span>“Blanks and NAs.”</span> July 10, 2023. <a href="https://pharmaverse.github.io/blog/posts/2023-07-10_blanks_and_nas/blanks_and_nas.html">https://pharmaverse.github.io/blog/posts/2023-07-10_blanks_and_nas/blanks_and_nas.html</a>.
</div></div></section></div> ]]></description>
  <category>admiral</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-07-10_blanks_and_nas/blanks_and_nas.html</guid>
  <pubDate>Mon, 10 Jul 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-07-10_blanks_and_nas/admiral.png" medium="image" type="image/png" height="108" width="144"/>
</item>
<item>
  <title>falcon</title>
  <dc:creator>Vincent Shen</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-07-09_falcon/falcon.html</link>
  <description><![CDATA[ 




<!--------------- typical setup ----------------->
<!--------------- post begins here ----------------->
<section id="what-is-falcon" class="level2">
<h2 class="anchored" data-anchor-id="what-is-falcon">What is {falcon}?</h2>
<p>The <a href="https://pharmaverse.github.io/falcon/">{falcon} initiative</a> is an industry collaborative effort under <a href="https://pharmaverse.org/">{pharmaverse}</a> that unites Boehringer Ingelheim, Moderna, Roche, and Sanofi with the aspiration of building and open-sourcing a comprehensive catalog of harmonized tables, listings, and graphs (TLGs) for clinical study reporting. By leveraging existing open-source R packages, {falcon} aims to simplify the process of output review, comparison, and meta-analyses, while fostering efficient communication among stakeholders in the pharmaceutical industry.</p>
</section>
<section id="why-do-we-build-it" class="level2">
<h2 class="anchored" data-anchor-id="why-do-we-build-it">Why do we build it?</h2>
<p>The collaborative effort focuses on improving the clarity, consistency, and accessibility of TLGs by addressing variations and redundancies in their creation and use. This harmonized approach allows for streamlined reporting processes and facilitates effective communication of study results within the industry and to regulatory authorities.</p>
</section>
<section id="what-has-been-done-so-far" class="level2">
<h2 class="anchored" data-anchor-id="what-has-been-done-so-far">What has been done so far?</h2>
<p>Drawing inspiration from the FDA Standard Safety Tables and Figures Integrated Guide, the {falcon} initiative has successfully developed and open-sourced 11 templates to date. 4 product owners and 11 developers from 4 companies have collaborated to make these templates available and also published them on the official {falcon} website at <a href="https://pharmaverse.github.io/falcon/">https://pharmaverse.github.io/falcon/</a>.</p>
</section>
<section id="next-steps-vision" class="level2">
<h2 class="anchored" data-anchor-id="next-steps-vision">Next steps &amp; vision</h2>
<p>Future plans for {falcon} involve expanding the catalog through continuous collaboration from participating companies and inviting wider industry engagement. The ultimate goal is to promote harmonization of TLGs for clinical reporting across the pharmaceutical industry, leading to greater efficiency, collaboration, and innovation. Even though templates currently come from a published FDA guide, the collaborating companies are open to share and discuss similarities and differences on analysis concepts and output layouts of their own implementations in clinical reporting, for both safety and efficacy analyses.</p>
<p>In addition, while currently all templates were built using {rtables}, {tern}, {rlistings} and drew inspiration from the open-sourced <a href="https://insightsengineering.github.io/tlg-catalog/">TLG-Catalog</a>, moving forward, we plan to support creating the same templates using alternative table engines such as {gt}.</p>
<p>{falcon} will be presented at the upcoming PHUSE EU (Standards Implementation stream), where we will share the collaboration journey of {falcon} so far, providing more details on the current progress, long-term vision, and strategies for this initiative. Attendees will gain insights into the challenges and opportunities of harmonizing clinical reporting through open-source collaboration and learn about the potential benefits and future direction of {falcon}.</p>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2023-08-08 12:54:38.796232</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-07-09_falcon/index.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-07-09_falcon/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{shen2023,
  author = {Shen, Vincent},
  title = {Falcon},
  date = {2023-07-09},
  url = {https://pharmaverse.github.io/blog/posts/2023-07-09_falcon/falcon.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-shen2023" class="csl-entry quarto-appendix-citeas">
Shen, Vincent. 2023. <span>“Falcon.”</span> July 9, 2023. <a href="https://pharmaverse.github.io/blog/posts/2023-07-09_falcon/falcon.html">https://pharmaverse.github.io/blog/posts/2023-07-09_falcon/falcon.html</a>.
</div></div></section></div> ]]></description>
  <category>falcon</category>
  <category>displays</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-07-09_falcon/falcon.html</guid>
  <pubDate>Sun, 09 Jul 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-07-09_falcon/falcon.png" medium="image" type="image/png" height="67" width="144"/>
</item>
<item>
  <title>Hello pharmaverse</title>
  <dc:creator>Ben Straub</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-06-28_welcome/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<section id="purpose" class="level2">
<h2 class="anchored" data-anchor-id="purpose">Purpose</h2>
<p>The communications working group (CWG) seeks to promote and showcase how R can be used in the Clinical Reporting pipeline through short and informative blog posts. These posts will be hosted on this <a href="https://pharmaverse.github.io/blog/">pharmaverse blog</a> and promoted on the pharmaverse slack channels as well as on LinkedIn.</p>
<p>As the CWG is a small team, we hope to make the blog development process easy enough that pharmaverse community members will be able to easily write blog posts with guidance from the CWG team.</p>
</section>
<section id="spirit-of-a-blog-post" class="level2">
<h2 class="anchored" data-anchor-id="spirit-of-a-blog-post">Spirit of a Blog Post</h2>
<p>The CWG believes that the following 4 points will help guide the creation of Blog Posts.</p>
<ul>
<li><strong>Short</strong></li>
<li><strong>Personalized</strong></li>
<li><strong>Reproducible</strong></li>
<li><strong>Readable</strong></li>
</ul>
<p><strong>Short:</strong> Posts should aim to be under a 10 minute read. We encourage longer posts to be broken up into multiple posts.</p>
<p><strong>Personalized:</strong> Posts should have a personality! For example, a person wishing to post on a function in a package needs to differentiate the post from the documentation for function, i.e.&nbsp;we don’t want to just recycle the documentation. How can you add your voice and experience? A bit of cheeky language is also encouraged.</p>
<p><strong>Reproducible:</strong> Posts should work with minimal dependencies with data, packages and outside sources. Every dependency introduced in a post adds some risk to the post longevity. As package dependencies change, posts should be built in a way that they can be updated to stay relevant.</p>
<p><strong>Readable:</strong> The CWG sees this site as more of introductory site rather advanced user site. Therefore, the CWG feels that code should be introduced in a way that promotes readability over complexity.</p>
</section>
<section id="what-types-of-posts-are-allowed-on-this-site" class="level2">
<h2 class="anchored" data-anchor-id="what-types-of-posts-are-allowed-on-this-site">What types of posts are allowed on this site?</h2>
<p>Overall, we want to stay focus on the Clinical Reporting Pipeline, which we see as the following topics:</p>
<ol type="1">
<li>Packages in the Clinical Reporting Pipeline</li>
<li>Functions from packages in the Clinical Reporting Pipeline</li>
<li>Wider experiences of using R in the Clinical Reporting Pipeline</li>
<li>Conference experiences and the Clinical Reporting Pipeline</li>
</ol>
<p>However, it never hurts to ask if you topic might fit into this medium!</p>
<section id="minimum-post-requirements" class="level3">
<h3 class="anchored" data-anchor-id="minimum-post-requirements">Minimum Post Requirements</h3>
<ul>
<li>A unique image to help showcase the post.</li>
<li>Working Code</li>
<li>Self-contained data or package data.</li>
<li>Documentation of package versions</li>
</ul>
<p>That is it! After that you can go wild, but we do ask that it is kept short!</p>
</section>
</section>
<section id="how-can-i-make-a-blog-post" class="level2">
<h2 class="anchored" data-anchor-id="how-can-i-make-a-blog-post">How can I make a Blog Post</h2>
<p>Step 1: Reach out to us through <a href="pharmaverse.slack.com">pharmaverse/slack</a> or make an issue on our <a href="https://github.com/pharmaverse/blog/issues">GitHub</a>.</p>
<p>Step 2: Branch off <code>main</code></p>
<p>Step 3: Review the Spirit of the Blog Post in the Pull Request Template</p>
<p>Step 4: Poke us to do a review!</p>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2023-08-08 12:54:45.373951</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-01-09_welcome/index.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-01-09_welcome/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{straub2023,
  author = {Straub, Ben},
  title = {Hello Pharmaverse},
  date = {2023-06-28},
  url = {https://pharmaverse.github.io/blog/posts/2023-06-28_welcome},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-straub2023" class="csl-entry quarto-appendix-citeas">
Straub, Ben. 2023. <span>“Hello Pharmaverse.”</span> June 28, 2023. <a href="https://pharmaverse.github.io/blog/posts/2023-06-28_welcome">https://pharmaverse.github.io/blog/posts/2023-06-28_welcome</a>.
</div></div></section></div> ]]></description>
  <category>community</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-06-28_welcome/index.html</guid>
  <pubDate>Wed, 28 Jun 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-06-28_welcome/pharmaverse.PNG" medium="image"/>
</item>
<item>
  <title>Hackathon Feedback Application</title>
  <dc:creator>Stefan Thoma</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-06-27__hackathon_app/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>We recently created a shiny application for the <a href="https://cosa.cdisc.org/events/Admiral"><code>admiral</code> hackathon</a> in February 2023. The <a href="https://cosa.cdisc.org/events/Admiral"><code>admiral</code> hackathon</a> was an event designed to make statistical programmers from the pharmaceutical industry more comfortable with the <a href="https://pharmaverse.github.io/admiral/cran-release/"><code>admiral</code></a> R package which allows users to efficiently transform data from one data standard (SDTM) to another (ADaM).</p>
<p>Hackathon participants formed groups of up to five people and were then tasked to create R-scripts that map the SDTM data to ADaM according to specifics defined in the metadata.</p>
<p>The purpose of the shiny app was threefold:</p>
<ol type="1">
<li><p>Allow participants to easily register as a team.</p></li>
<li><p>Let participants upload their R-scripts, so that the <a href="https://github.com/pharmaverse/admiral/graphs/contributors"><code>admiral</code> team</a> can see how the <a href="https://pharmaverse.github.io/admiral/cran-release/"><code>admiral</code></a> package is being used – and how the functions and the documentation could be improved.</p></li>
<li><p>Run participants R-scripts on the cloud and compare the produced file to a solution file. Let participants autonomously get feedback on their work.</p></li>
</ol>
<p>In this blog post I want to highlight some of the thoughts that went into this application. Please keep in mind that this work was done under tight time restraints.</p>
<p>The <a href="https://zxqguo-stefan0pascal-thoma.shinyapps.io/data_upload/?_ga=2.75919894.2036952320.1679990144-1584712930.1674550185">hackathon application</a> is still online (although data-upload is switched off) and the <a href="https://github.com/StefanThoma/hackathon_app">GitHub repository</a> is publicly available. The application is embedded into this post right after this paragraph. I have also uploaded to GitHub a <code>.zip</code> file of the workspace to which hackathon participants had access via <a href="https://posit.cloud">posit cloud</a>. For more context you can watch <a href="https://www.cdisc.org/events/webinar/admiral-hackathon-kickoff">recordings of the hackathon-meetings</a>.</p>
<div class="cell">
<iframe src="https://zxqguo-stefan0pascal-thoma.shinyapps.io/data_upload/?_ga=2.75919894.2036952320.1679990144-1584712930.1674550185" width="672" height="400px" data-external="1">
</iframe>
</div>
<section id="permanent-data" class="level2">
<h2 class="anchored" data-anchor-id="permanent-data">Permanent Data</h2>
<p>The biggest challenge you have to consider for this app is the permanent data storage. Shiny apps run on a server. Although we can write files on this server, whenever the app restarts, the files are lost. Therefore, a <a href="https://shiny.rstudio.com/articles/persistent-data-storage.html#local-vs-remote">persistent data storage solution</a> is required.</p>
<section id="google-drive" class="level3">
<h3 class="anchored" data-anchor-id="google-drive">Google drive</h3>
<p>I decided to leverage Google drive using the <a href="https://googledrive.tidyverse.org/"><code>googledrive</code> package</a> package. This allowed me to save structured data (the team registry and the submission scores) as well as unstructured data (their R-script files).</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Authentication
</div>
</div>
<div class="callout-body-container callout-body">
<p>To access Google drive using the <a href="https://googledrive.tidyverse.org/"><code>googledrive</code> package</a> we need to authenticate. This can be done interactively using the command <code>googledrive::drive_auth()</code> which takes you to the Google login page. After login you receive an authentication token requested by R.</p>
<p>For non-interactive authentication this token must be stored locally. In our case where the shiny app must access the token once deployed, the token must be stored on the project level.</p>
<p>I have included the authentication procedure I followed in the <code>R</code> folder in <code>google_init.R</code>. You can find more extensive <a href="https://googledrive.tidyverse.org/reference/drive_auth.html">documentation of the non-interactive authentication</a>.</p>
</div>
</div>
<p>The initial concept was: Each team gets their own folder including the most recent submission for each task, and a <code>.csv</code> file containing team information. To keep track of the submissions and the respective scores we wrote a <code>.csv</code> file in the <code>mock-hackathon</code> folder, so one folder above the team folders.</p>
<p>Saving the team info as a <code>.csv</code> file worked fine as each team received their own file which – once created – was not touched anymore. As each upload for every team should simply add a row to the <code>submissions.csv</code> file, appending the file would be ideal. This was not possible using the <a href="https://googledrive.tidyverse.org/"><code>googledrive</code> package</a> package. Instead, for each submission, the <code>submissions</code> file was downloaded, appended, and uploaded again. Unfortunately, this lead to a data loss, as the file was continuously overwritten, especially when two teams would submit simultaneously.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Recover the Lost Data
</div>
</div>
<div class="callout-body-container callout-body">
<p>Whenever the <code>submissions.csv</code> file was uploaded, the previous version was sent to the Google drive bin. We ended up with over 3000 <code>submissions.csv</code> files containing a lot of redundant information. I had to write the following chunk to first get the unique file IDs of the 3000 <code>submissions.csv</code> files, create an empty <code>submissions</code> data-frame, and then download each file and add its information to the <code>submisisons</code> data-frame. To keep the data-frame as light as possible, after each append I deleted all duplicate submissions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get all task_info.csv ID's</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># each row identifies one file in the trash</span></span>
<span id="cb1-3">task_info_master <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_find</span>(</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task_info.csv"</span>,</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">trashed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb1-6">)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set up empty df to store all submissions</span></span>
<span id="cb2-2">origin <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">task =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">team =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb2-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb2-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>()</span>
<span id="cb2-8">)</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># downloads, reads, and returns one csv file given a file id</span></span>
<span id="cb2-11">get_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(row) {</span>
<span id="cb2-12">  tf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>()</span>
<span id="cb2-13">  row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_id</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drive_download</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> tf)</span>
<span id="cb2-16">  new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(tf) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(score, task, team) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">distinct</span>()</span>
<span id="cb2-19">}</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># quick and dirty for loop to subsequently download each file, extract information</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  merge with previous information and squash it (using distinct()).</span></span>
<span id="cb3-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(task_info_master)) {</span>
<span id="cb3-4">  origin <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(origin, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row =</span> task_info_master[i, ])) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">distinct</span>()</span>
<span id="cb3-6"></span>
<span id="cb3-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save progress in a separate file after every 100 downloaded and merged sheets</span></span>
<span id="cb3-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb3-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(i)</span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_csv</span>(origin, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prog_data/task_info_prog_"</span>, i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>))</span>
<span id="cb3-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update on progress</span></span>
<span id="cb3-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(task_info_master) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb3-13">  }</span>
<span id="cb3-14">}</span></code></pre></div>
</div>
<p>When doing such a time-intensive task, make sure to try it first with only a couple of files to see whether any errors are produced. I am not quite sure how long this took but when I returned from my lunch break everything had finished.</p>
</div>
</div>
<p>If you want to stay in the Google framework, I recommend using the <a href="https://googlesheets4.tidyverse.org/"><code>googlesheets4</code></a> package for structured data. <a href="https://googlesheets4.tidyverse.org/"><code>googlesheets4</code></a> allows appending new information to an already existing sheet without the need to download the file first. As both packages follow the same style, going from one to the other is really simple. <a href="https://googlesheets4.tidyverse.org/"><code>googlesheets4</code></a> requires authentication as well. However, you can reuse the cached token from the <a href="https://googledrive.tidyverse.org/"><code>googledrive</code> package</a> authentication by setting <code>gs4_auth(token = drive_token())</code>.</p>
</section>
<section id="security-concerns" class="level3">
<h3 class="anchored" data-anchor-id="security-concerns">Security Concerns</h3>
<p>Connecting a public shiny app to your Google account introduces a security vulnerability in general. Especially so because we implemented the upload of files to Google drive. And even more problematic: We run a user generated script and display some of its output. A malicious party might be able to extract the authentication token of our Google account or could upload malware to the drive.</p>
<p>To reduce the risk, I simply created an un-associated Google account to host the drive. There are certainly better options available, but this seemed a reasonable solution achieved with very little effort.</p>
</section>
</section>
<section id="register-team" class="level2">
<h2 class="anchored" data-anchor-id="register-team">Register Team</h2>
<p>We wanted to allow users to sign up as teams using the shiny app. The app provides a simple interface where users could input a team name and the number of members. This in turn would open two fields for each user to input their name and email address.</p>
<p>We do simple checks to make sure at least one valid email address is supplied, and that the group name is acceptable. The group name cannot be empty, already taken, or contain vulgar words.</p>
<p>The team registration itself was adding the team information to the Google sheets file <code>event_info</code> into the sheet <code>teams</code> and to create a team folder in which to store the uploaded R files.</p>
<p>The checks and registration is implemented in the <code>register_team()</code> function stored in <code>interact_with_google.R</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-06-27__hackathon_app/register_team.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Screenshot of the register team interface</figcaption>
</figure>
</div>
<p>The challenge here was to adapt the number of input fields depending on the number of team members. This means that the team name and email interface must be rendered: First, we check how many team members are part of the group, this is stored in the <code>input$n_members</code> input variable. Then we create a <code>tagList</code> with as many elements as team members. Each element contains two columns, one for the email, one for the member name. This <code>tagList</code> is then returned and displayed to the user.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># render email input UI of the register tab</span></span>
<span id="cb4-2">output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name_email <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderUI</span>({</span>
<span id="cb4-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create field names</span></span>
<span id="cb4-4">  N <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_members</span>
<span id="cb4-5">  NAME <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>N, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(i) {</span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>, i)</span>
<span id="cb4-7">  })</span>
<span id="cb4-8">  EMAIL <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>N, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(i) {</span>
<span id="cb4-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span>, i)</span>
<span id="cb4-10">  })</span>
<span id="cb4-11"></span>
<span id="cb4-12">  output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>()</span>
<span id="cb4-13"></span>
<span id="cb4-14"></span>
<span id="cb4-15">  firstsecondthird <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Second"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Third"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fourth"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fifth"</span>)</span>
<span id="cb4-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>N) {</span>
<span id="cb4-17">    output[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>()</span>
<span id="cb4-18">    output[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidRow</span>(</span>
<span id="cb4-19">      shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h4</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(firstsecondthird[i], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" Member"</span>)),</span>
<span id="cb4-20">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">column</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb4-21">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">textInput</span>(NAME[i], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name"</span>),</span>
<span id="cb4-22">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># displayed default value</span></span>
<span id="cb4-23">      ),</span>
<span id="cb4-24">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">column</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb4-25">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">textInput</span>(EMAIL[i], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Email"</span>),</span>
<span id="cb4-26">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span></span>
<span id="cb4-27">      )</span>
<span id="cb4-28">    )</span>
<span id="cb4-29">  }</span>
<span id="cb4-30">  output</span>
<span id="cb4-31">})</span></code></pre></div>
</div>
<p>The team information is then uploaded to Google drive. Because some teams have more members than others, we have to create the respective data-frame with the number of team members in mind.</p>
<p>The following chunk creates the registration data. Noteworthy here the creation of the <code>NAME</code> and <code>EMAIL</code> variables which depend on the number of members in this team. Further, the user input of these fields is extracted via <code>input[[paste0(NAME[i])]]</code> within a for-loop.</p>
<p>We also make the data-creation dependent on the press of the <code>Register Group</code> button and cache some variables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## registration</span></span>
<span id="cb5-2">registrationData <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb5-4">    N <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_members</span>
<span id="cb5-5">    NAME <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>N, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(i) {</span>
<span id="cb5-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>, i)</span>
<span id="cb5-7">    })</span>
<span id="cb5-8">    EMAIL <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>N, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(i) {</span>
<span id="cb5-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span>, i)</span>
<span id="cb5-10">    })</span>
<span id="cb5-11">    names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-12">    emails <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-13"></span>
<span id="cb5-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>N) {</span>
<span id="cb5-15">      names[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> input[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(NAME[i])]]</span>
<span id="cb5-16">      emails[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> input[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(EMAIL[i])]]</span>
<span id="cb5-17">    }</span>
<span id="cb5-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create df</span></span>
<span id="cb5-19">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb5-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">team_name =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>team_name,</span>
<span id="cb5-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_members =</span> N,</span>
<span id="cb5-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">member_name =</span> names,</span>
<span id="cb5-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">member_email =</span> emails</span>
<span id="cb5-24">    )</span>
<span id="cb5-25">  }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bindCache</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>team_name, input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_members, input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name1, input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>email1) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bindEvent</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>register) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wait for button press</span></span></code></pre></div>
</div>
</section>
<section id="upload-source-script" class="level2">
<h2 class="anchored" data-anchor-id="upload-source-script">Upload &amp; Source Script</h2>
<p>To upload a script, participants had to select their team first. The input options were based on the existing folders on the Google-drive in the <code>mock_hackathon</code> folder. To upload a particular script participants had to also select the task to be solved. The uploaded script is then uploaded to the team folder following a standardised script naming convention.</p>
<p>There are different aspects to be aware of when sourcing scripts on a shiny server. For example, you have to anticipate the packages users will include in their uploaded scripts, as their scripts will load but not install packages. Further, you should keep the global environment of your shiny app separate from the environment in which the script is sourced. This is possible by supplying an environment to the <code>source()</code> function, e.g: <code>source(path_to_script, local = new.env())</code></p>
<p>Another thing we had to consider was to replicate the exact folder-structure on the shiny server that participants were working with when creating the scripts, as they were required to source some scripts and to save their file into a specific folder. This was relatively straight forward as we provided participants with a folder structure in the posit cloud instance they were using. They had access to the <code>sdtm</code> folder in which the data was stored, and the <code>adam</code> folder into which they saved their solutions. The structure also included a folder with metadata which was also available on the shiny server.</p>
<p>For some tasks, participants required some ADaM-datasets stored in the <code>adam</code> folder, essentially the output from previous tasks. This was achieved by first creating a list mapping tasks to the required ADaM datasets:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">depends_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb6-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADADAS"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADSL"</span>),</span>
<span id="cb6-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADAE"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADSL"</span>),</span>
<span id="cb6-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADLBC"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADSL"</span>),</span>
<span id="cb6-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADLBH"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADSL"</span>),</span>
<span id="cb6-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADLBHY"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADSL"</span>),</span>
<span id="cb6-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADSL"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb6-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADTTE"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADSL"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADAE"</span>),</span>
<span id="cb6-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADVS"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADSL"</span>)</span>
<span id="cb6-10">)</span></code></pre></div>
</div>
<p>This list is sourced from the <code>R/parameters.R</code> file when initiating the application. We then call the <code>get_depends()</code> function sourced from <code>R/get_depends.R</code> which copies the required files from the <code>key</code> folder (where our solutions to the tasks were stored) to the <code>adam</code> folder. After sourcing the uploaded script the content in the <code>adam</code> folder is deleted.</p>
</section>
<section id="compare-to-solution-file" class="level2">
<h2 class="anchored" data-anchor-id="compare-to-solution-file">Compare to Solution File</h2>
<p>We want to compare the file created by participants with our solution (key) file stored in the <code>key</code> folder. The <code>diffdf::diffdf()</code> function allows for easy comparison of two data-frames and directly provides extensive feedback for the user:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb7-2">df1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb7-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">numbers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb7-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">letters =</span> LETTERS[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb7-5">)</span>
<span id="cb7-6">df2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb7-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">numbers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb7-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">letters =</span> letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb7-9">)</span>
<span id="cb7-10"></span>
<span id="cb7-11">diffdf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diffdf</span>(df1, df2)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in diffdf::diffdf(df1, df2): 
Not all Values Compared Equal</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Differences found between the objects!

A summary is given below.

Not all Values Compared Equal
All rows are shown in table below

  =============================
   Variable  No of Differences 
  -----------------------------
   letters          10         
  -----------------------------


All rows are shown in table below

  ========================================
   VARIABLE  ..ROWNUMBER..  BASE  COMPARE 
  ----------------------------------------
   letters         1         A       a    
   letters         2         B       b    
   letters         3         C       c    
   letters         4         D       d    
   letters         5         E       e    
   letters         6         F       f    
   letters         7         G       g    
   letters         8         H       h    
   letters         9         I       i    
   letters        10         J       j    
  ----------------------------------------</code></pre>
</div>
</div>
</section>
<section id="score" class="level2">
<h2 class="anchored" data-anchor-id="score">Score</h2>
<p>To compare submissions between participants we implemented a simple scoring function (<code>score_f()</code>) based on the table comparison by <code>diffdf()</code>. The function can be found in the <code>compare_dfs.R</code> file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">score_f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(df_user, df_key, keys) {</span>
<span id="cb10-2">  score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb10-3">  diff <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diffdf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diffdf</span>(df_user, df_key, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">keys =</span> keys)</span>
<span id="cb10-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>diffdf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diffdf_has_issues</span>(diff)) {</span>
<span id="cb10-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(score)</span>
<span id="cb10-6">  }</span>
<span id="cb10-7"></span>
<span id="cb10-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check if there are any differences if the comparison is not strict:</span></span>
<span id="cb10-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>diffdf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diffdf_has_issues</span>(diffdf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diffdf</span>(df_user,</span>
<span id="cb10-10">    df_key,</span>
<span id="cb10-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">keys =</span> keys,</span>
<span id="cb10-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strict_numeric =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb10-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strict_factor =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb10-14">  ))) {</span>
<span id="cb10-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if differences are not strict, return score - 1</span></span>
<span id="cb10-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(score <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-17">  }</span>
<span id="cb10-18"></span>
<span id="cb10-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(score <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(diff) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb10-20">}</span></code></pre></div>
</div>
<p>Every comparison starts with a score of <code>10</code>. We then subtract the length of the comparison object divided by a factor of <code>3</code>. The length of the comparison object is a simplified way to represent the difference between the two data-frames by one value. Finally, the score is bounded by <code>1</code> using <code>max(score, 1)</code>.</p>
<p>The score is not a perfect capture of the quality of the script uploaded but: 1. helped participants get an idea of how close their data-frame is to the solution file 2. allowed us to raffle prizes based on the merit of submitted r-scripts</p>
</section>
<section id="reactiveness" class="level2">
<h2 class="anchored" data-anchor-id="reactiveness">Reactiveness</h2>
<p>Some of the app functions can take quite some time to execute, e.g.&nbsp;running the uploaded script. Other tasks, e.g.&nbsp;registering a team, do not intrinsically generate user facing outputs. This would make the app using really frustrating, as users would not know whether the app is correctly working or whether it froze.</p>
<p>We implemented two small features that made the app more responsive. One is simple loading icons that integrate into the user interface and show that output is being computed – that something is working. The other is a pop up window which communicates whether team registration was successful, and if not, why not.</p>
<p>We further aimed to forward errors generated by the uploaded scripts to the user interface, but errors generated by the application itself should be concealed.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Although the application was continuously improved during the hackathon it proved to be a useful resource for participants from day one as it allowed groups to set their own pace. It further allowed <a href="https://github.com/pharmaverse/admiral/graphs/contributors"><code>admiral</code> developers</a> to gain insights on package usage of a relatively large sample of potential end users. From our perspective, the application provided a great added value to the hackathon and eased the workload of guiding the participants through all the tasks.</p>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2023-08-08 12:54:50.081647</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-06-19_shiny_run_script/index.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-06-19_shiny_run_script/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{thoma2023,
  author = {Thoma, Stefan},
  title = {Hackathon {Feedback} {Application}},
  date = {2023-06-27},
  url = {https://pharmaverse.github.io/blog/posts/2023-06-27__hackathon_app},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-thoma2023" class="csl-entry quarto-appendix-citeas">
Thoma, Stefan. 2023. <span>“Hackathon Feedback Application.”</span> June
27, 2023. <a href="https://pharmaverse.github.io/blog/posts/2023-06-27__hackathon_app">https://pharmaverse.github.io/blog/posts/2023-06-27__hackathon_app</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>shiny</category>
  <category>community</category>
  <category>admiral</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-06-27__hackathon_app/index.html</guid>
  <pubDate>Tue, 27 Jun 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-06-27__hackathon_app/shiny_klee.png" medium="image" type="image/png" height="141" width="144"/>
</item>
<item>
  <title>Derive a new parameter computed from the value of other parameters</title>
  <dc:creator>Kangjie Zhang</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-06-27_admiral/valuelevel/derive_param_computed.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>When creating ADaM Basic Data Structure (BDS) datasets, we often encounter deriving a new parameter based on the analysis values (e.g., AVAL) of other parameters.</p>
<p>The <a href="https://pharmaverse.github.io/admiral/cran-release/"><code>admiral</code></a> function <a href="https://pharmaverse.github.io/admiral/cran-release/reference/derive_param_computed.html"><code>derive_param_computed()</code></a> adds a parameter computed from the analysis value of other parameters.</p>
<p>It works like a calculator to derive new records without worrying about merging and combining datasets, all you need is a derivation formula, which also improves the readability of the code.</p>
</section>
<section id="example" class="level2">
<h2 class="anchored" data-anchor-id="example">Example</h2>
<p>A value level validation use case, where <code>derive_param_computed()</code> is used to validate a derived parameter - <code>PARAMCD = ADPCYMG</code> (Actual Dose per Cycle) in ADEX dataset.</p>
<section id="derivation" class="level3">
<h3 class="anchored" data-anchor-id="derivation">Derivation</h3>
<p>Actual Dose per Cycle is derived from the Total Amount of Dose (<code>PARAMCD = TOTDOSE</code>) / Number of Cycles (<code>PARAMCD = NUMCYC</code>)</p>
<p>In this example, <code>ADEX.AVAL when ADEX.PARAMCD = ADPCYMG</code> can be derived as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AAVAL%20(PARAMCD%20=%20ADPCYMG)%20=%20%5Cfrac%7BAVAL%20(PARAMCD%20=%20TOTDOSE)%7D%7BAVAL%20(PARAMCD%20=%20NUMCYC)%7D%0A"></p>
</section>
<section id="loading-packages-and-creating-example-data" class="level3">
<h3 class="anchored" data-anchor-id="loading-packages-and-creating-example-data">Loading Packages and Creating Example Data</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(diffdf)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(admiral)</span>
<span id="cb1-5"></span>
<span id="cb1-6">adex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb1-7">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>USUBJID,  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>PARAMCD,  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>PARAM,                       <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>AVAL,</span>
<span id="cb1-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"101"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TOTDOSE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total Amount of Dose (mg)"</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>,</span>
<span id="cb1-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"101"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NUMCYC"</span>,  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of Cycles"</span>,           <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb1-10">)</span></code></pre></div>
</div>
</section>
<section id="derive-new-parameter" class="level3">
<h3 class="anchored" data-anchor-id="derive-new-parameter">Derive New Parameter</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">adex_admiral <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">derive_param_computed</span>(</span>
<span id="cb2-2">  adex,</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(USUBJID),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parameters =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TOTDOSE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NUMCYC"</span>),</span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">analysis_value =</span> AVAL.TOTDOSE <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> AVAL.NUMCYC,</span>
<span id="cb2-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">set_values_to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(</span>
<span id="cb2-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PARAMCD =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADPCYMG"</span>,</span>
<span id="cb2-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PARAM =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual Dose per Cycle (mg)"</span></span>
<span id="cb2-9">  )</span>
<span id="cb2-10">)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 4
  USUBJID PARAMCD PARAM                       AVAL
  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;                      &lt;dbl&gt;
1 101     TOTDOSE Total Amount of Dose (mg)    180
2 101     NUMCYC  Number of Cycles               3
3 101     ADPCYMG Actual Dose per Cycle (mg)    60</code></pre>
</div>
</div>
</section>
<section id="compare" class="level3">
<h3 class="anchored" data-anchor-id="compare">Compare</h3>
<p>For validation purpose, the <a href="https://gowerc.github.io/diffdf/reference/diffdf.html">diffdf</a> package is used below to mimic SAS <code>proc compare</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">adex_expected <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb4-2">  adex,</span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb4-4">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>USUBJID,  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>PARAMCD,  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>PARAM,                       <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>AVAL,</span>
<span id="cb4-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"101"</span>,     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADPCYMG"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual Dose per Cycle (mg)"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb4-6">  )</span>
<span id="cb4-7">)</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diffdf</span>(adex_expected, adex_admiral, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">keys =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"USUBJID"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PARAMCD"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>No issues were found!</code></pre>
</div>
</div>
<!--------------- appendices go here ----------------->
</section>
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2023-08-08 12:54:56.091925</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/admiral/index.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/admiral/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{zhang2023,
  author = {Zhang, Kangjie},
  title = {Derive a New Parameter Computed from the Value of Other
    Parameters},
  date = {2023-06-27},
  url = {https://pharmaverse.github.io/blog/posts/2023-06-27_admiral/valuelevel/derive_param_computed.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-zhang2023" class="csl-entry quarto-appendix-citeas">
Zhang, Kangjie. 2023. <span>“Derive a New Parameter Computed from the
Value of Other Parameters.”</span> June 27, 2023. <a href="https://pharmaverse.github.io/blog/posts/2023-06-27_admiral/valuelevel/derive_param_computed.html">https://pharmaverse.github.io/blog/posts/2023-06-27_admiral/valuelevel/derive_param_computed.html</a>.
</div></div></section></div> ]]></description>
  <category>admiral</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-06-27_admiral/valuelevel/derive_param_computed.html</guid>
  <pubDate>Tue, 27 Jun 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-06-27_admiral/valuelevel/derive_param_computed.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Admiral Hackathon 2023 Revisited</title>
  <dc:creator>Stefan Thoma</dc:creator>
  <link>https://pharmaverse.github.io/blog/posts/2023-06-27_hackathon_writeup/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>This January and February (2023), the <code>admiral</code> development team and the CDISC Open Source Alliance jointly hosted the admiral hackathon. The idea was to build a community of <code>admiral</code> users, and help participants familiarize themselves with R and <code>admiral</code>. This whole effort was led by <a href="https://www.linkedin.com/in/thomasneitmann/">Thomas Neitmann</a> and was supported by <a href="https://www.linkedin.com/in/zelos-zhu-7969a1103/">Zelos Zhu</a>, <a href="https://www.linkedin.com/in/sadchla-mascary/">Sadchla Mascary</a>, and me – <a href="https://www.linkedin.com/in/stefan-thoma-77537bb5/">Stefan Thoma</a>.</p>
<p>The hackathon event was structured in two parts. First, we offered an <em>Introduction to R</em> for SAS programmers, a three hour workshop for R beginners to get them up to speed. Here we covered practical R basics, talking about how the R-workflow differs from a SAS workflow, and discussed common R functions - mostly from the tidyverse. This ensured that hackathon participants were familiar with core R concepts. The <a href="https://www.cdisc.org/events/webinar/pre-admiral-hackathon-workshop-introduction-r-sas-programmers">workshop recording</a> and the <a href="https://pharmaverse.github.io/intro-to-r-for-sas-programmers-workshop/">course materials</a> are available online.</p>
<p>The main hackathon consisted of several ADAM data generating tasks based on a specs file and synthetic data. Participants were able to solve these tasks in groups at their own pace thanks to a online tool where participants could upload their task specific R scripts and they would get automatic feedback for the data-set produced by their script. Script upload through <a href="https://zxqguo-stefan0pascal-thoma.shinyapps.io/data_upload/">the feedback application</a> was available all through February, and we offered three additional online meetings throughout the month to discuss challenges and give some tips. If you are interested in learning more about the thoughts that went into the feedback application, you can read about it in <a href="https://pharmaverse.github.io/blog/posts/2023-06-27_hackathon_app/">this blogpost</a> or check out my <a href="https://github.com/StefanThoma/hackathon_app">public GitHub repository for such an application</a>.</p>
<section id="introduction-to-r-workshop" class="level2">
<h2 class="anchored" data-anchor-id="introduction-to-r-workshop"><em>Introduction to R</em> workshop</h2>
<p>We were really excited to see over <strong>500</strong> people from around 40 countries joining our <em>Introduction to R workshop</em> in January! To get to know prospective users and hackathon participants better, we conducted some polls during the meetings. Below you can see that representatives of many different sorts of organisations joined our <em>Introduction to R</em> workshop:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-06-27_hackathon_writeup/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>216 out of 402 confirmed that their company is already using R for clinical trial data analysis, the remaining 131 did not answer this question.</p>
<p>The target audience for this workshop was programmers who are very familiar with SAS, but not so familiar with R, our polls confirmed this.</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-06-27_hackathon_writeup/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Overall, we were very happy with how the workshop turned out, and participants overall agreed with this sentiment (although there may be a slight <a href="https://en.wikipedia.org/wiki/Survivorship_bias">survivorship bias</a>…).</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://pharmaverse.github.io/blog/posts/2023-06-27_hackathon_writeup/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="admiral-hackathon" class="level2">
<h2 class="anchored" data-anchor-id="admiral-hackathon"><code>admiral</code> Hackathon</h2>
<p>Following the kick-off meeting, 371 participants joined the posit (rStudio) workspace that was made available to all participants at no costs by the <a href="https://posit.co/">posit company</a>. About half the participants planned to spend one to two hours per week on the admiral tasks, the other half planned to allocate even more. 15 participants even planned to spend eight hours or more!</p>
<p>We were really happy to see an overwhelming amount of activity on the slack channel we set up with over 250 members. Not only were people engaging with the materials, but we saw how a community was formed where people were encouraged to ask questions and where community members went out of their way to help each other. Shout-out to our community hero: <a href="https://www.linkedin.com/in/jagadishkatam/">Jagadish Katam</a> without whom most issues related to the task programming raised by the community would not have been addressed as quickly as they were. Huge thanks from the organizers!</p>
<p>In the end, a total of 44 teams spanning 87 statistical programmers took part in the admiral hackathon and uploaded solution scripts to the hackathon application solving at least one of the 8 tasks available (ADSL, ADAE, ADLBC, ADVS, ADTTE, ADADAS, ADLBH &amp; ADLBHY). Participants’ scripts were then run on the shiny server and the output data-frame were compared to the solutions we provided. At the read-out there was a live draft of teams to win one-on-one <code>admiral</code> consulting with one of the <code>admiral</code> core developers. Winning probabilities were weighted by the number of points each group received for the quality of their output data-frames and for the number of tasks solved.</p>
<p>Congratulations to the winners:</p>
<ul>
<li><code>ViiV Team_GSK</code></li>
<li><code>teamspoRt</code></li>
<li><code>TatianaPXL</code></li>
<li><code>Divyasneelam</code></li>
<li><code>AdaMTeamIndia</code></li>
<li><code>Sanofi_BP</code></li>
<li><code>Jagadish</code> (our community hero)</li>
<li><code>AZ_WAWA</code></li>
</ul>
<p>Although this was uncertain during the hackathon we were excited to provide a Certificate of Completion to all participants who uploaded a script to the Web Application.</p>
<p>A recording of the hackathon readout can be found in the <a href="https://www.cdisc.org/events/webinar/cosa-quarterly-spotlight-q1-2023">CDISC Open Source Alliance Quarterly Spotlight</a>.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Overall, we are very happy with how the hackathon turned out. We were not only positively surprised with the huge audience for the <em>Intro to R</em> workshop (CDISC record breaking) and for the <code>admiral</code> hackathon, but even more so with the engagement of all the participants.</p>
<p>Again, we would like to thank all the organizers, participants, and sponsors for their time and resources and hope to have provided a useful glimpse into our solution for ADAM creation within the end-to-end clinical data analysis open source R framework that the Pharmaverse aims to provide.</p>
<p>As always, we are very happy to hear more feedback on the hackathon as well as on <code>admiral</code> in general. Simply submit an issue on the <a href="https://github.com/pharmaverse/admiral"><code>admiral</code> GitHub repository</a>. You would like to join the <code>admiral</code> core developers? Please reach out to <a href="mailto:edoardo.mancini@roche.com">Edoardo Mancini (product owner)</a> or <a href="mailto:ben.x.straub@gsk.com">Ben Straub (technical lead)</a>.</p>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2023-08-08 12:55:01.044249</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-06-19_shiny_run_script/index.qmd">source code</a>, <a href="https://github.com/pharmaverse/blog/tree/main/posts/2023-06-19_shiny_run_script/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{thoma2023,
  author = {Thoma, Stefan},
  title = {Admiral {Hackathon} 2023 {Revisited}},
  date = {2023-06-27},
  url = {https://pharmaverse.github.io/blog/posts/2023-06-27_hackathon_writeup},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-thoma2023" class="csl-entry quarto-appendix-citeas">
Thoma, Stefan. 2023. <span>“Admiral Hackathon 2023 Revisited.”</span>
June 27, 2023. <a href="https://pharmaverse.github.io/blog/posts/2023-06-27_hackathon_writeup">https://pharmaverse.github.io/blog/posts/2023-06-27_hackathon_writeup</a>.
</div></div></section></div> ]]></description>
  <category>community</category>
  <category>admiral</category>
  <guid>https://pharmaverse.github.io/blog/posts/2023-06-27_hackathon_writeup/index.html</guid>
  <pubDate>Tue, 27 Jun 2023 00:00:00 GMT</pubDate>
  <media:content url="https://pharmaverse.github.io/blog/posts/2023-06-27_hackathon_writeup/community.png" medium="image" type="image/png" height="144" width="144"/>
</item>
</channel>
</rss>
