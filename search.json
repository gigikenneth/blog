[
  {
    "objectID": "posts/2023-06-27_hackathon_writeup/index.html",
    "href": "posts/2023-06-27_hackathon_writeup/index.html",
    "title": "Admiral Hackathon 2023 Revisited",
    "section": "",
    "text": "This January and February (2023), the admiral development team and the CDISC Open Source Alliance jointly hosted the admiral hackathon. The idea was to build a community of admiral users, and help participants familiarize themselves with R and admiral. This whole effort was led by Thomas Neitmann and was supported by Zelos Zhu, Sadchla Mascary, and me – Stefan Thoma.\nThe hackathon event was structured in two parts. First, we offered an Introduction to R for SAS programmers, a three hour workshop for R beginners to get them up to speed. Here we covered practical R basics, talking about how the R-workflow differs from a SAS workflow, and discussed common R functions - mostly from the tidyverse. This ensured that hackathon participants were familiar with core R concepts. The workshop recording and the course materials are available online.\nThe main hackathon consisted of several ADAM data generating tasks based on a specs file and synthetic data. Participants were able to solve these tasks in groups at their own pace thanks to a online tool where participants could upload their task specific R scripts and they would get automatic feedback for the data-set produced by their script. Script upload through the feedback application was available all through February, and we offered three additional online meetings throughout the month to discuss challenges and give some tips. If you are interested in learning more about the thoughts that went into the feedback application, you can read about it in this blogpost or check out my public GitHub repository for such an application."
  },
  {
    "objectID": "posts/2023-06-27_hackathon_writeup/index.html#introduction-to-r-workshop",
    "href": "posts/2023-06-27_hackathon_writeup/index.html#introduction-to-r-workshop",
    "title": "Admiral Hackathon 2023 Revisited",
    "section": "Introduction to R workshop",
    "text": "Introduction to R workshop\nWe were really excited to see over 500 people from around 40 countries joining our Introduction to R workshop in January! To get to know prospective users and hackathon participants better, we conducted some polls during the meetings. Below you can see that representatives of many different sorts of organisations joined our Introduction to R workshop:\n\n\n\n\n\n216 out of 402 confirmed that their company is already using R for clinical trial data analysis, the remaining 131 did not answer this question.\nThe target audience for this workshop was programmers who are very familiar with SAS, but not so familiar with R, our polls confirmed this.\n\n\n\n\n\nOverall, we were very happy with how the workshop turned out, and participants overall agreed with this sentiment (although there may be a slight survivorship bias…)."
  },
  {
    "objectID": "posts/2023-06-27_hackathon_writeup/index.html#admiral-hackathon",
    "href": "posts/2023-06-27_hackathon_writeup/index.html#admiral-hackathon",
    "title": "Admiral Hackathon 2023 Revisited",
    "section": "admiral Hackathon",
    "text": "admiral Hackathon\nFollowing the kick-off meeting, 371 participants joined the posit (rStudio) workspace that was made available to all participants at no costs by the posit company. About half the participants planned to spend one to two hours per week on the admiral tasks, the other half planned to allocate even more. 15 participants even planned to spend eight hours or more!\nWe were really happy to see an overwhelming amount of activity on the slack channel we set up with over 250 members. Not only were people engaging with the materials, but we saw how a community was formed where people were encouraged to ask questions and where community members went out of their way to help each other. Shout-out to our community hero: Jagadish Katam without whom most issues related to the task programming raised by the community would not have been addressed as quickly as they were. Huge thanks from the organizers!\nIn the end, a total of 44 teams spanning 87 statistical programmers took part in the admiral hackathon and uploaded solution scripts to the hackathon application solving at least one of the 8 tasks available (ADSL, ADAE, ADLBC, ADVS, ADTTE, ADADAS, ADLBH & ADLBHY). Participants’ scripts were then run on the shiny server and the output data-frame were compared to the solutions we provided. At the read-out there was a live draft of teams to win one-on-one admiral consulting with one of the admiral core developers. Winning probabilities were weighted by the number of points each group received for the quality of their output data-frames and for the number of tasks solved.\nCongratulations to the winners:\n\nViiV Team_GSK\nteamspoRt\nTatianaPXL\nDivyasneelam\nAdaMTeamIndia\nSanofi_BP\nJagadish (our community hero)\nAZ_WAWA\n\nAlthough this was uncertain during the hackathon we were excited to provide a Certificate of Completion to all participants who uploaded a script to the Web Application.\nA recording of the hackathon readout can be found in the CDISC Open Source Alliance Quarterly Spotlight."
  },
  {
    "objectID": "posts/2023-06-27_hackathon_writeup/index.html#conclusion",
    "href": "posts/2023-06-27_hackathon_writeup/index.html#conclusion",
    "title": "Admiral Hackathon 2023 Revisited",
    "section": "Conclusion",
    "text": "Conclusion\nOverall, we are very happy with how the hackathon turned out. We were not only positively surprised with the huge audience for the Intro to R workshop (CDISC record breaking) and for the admiral hackathon, but even more so with the engagement of all the participants.\nAgain, we would like to thank all the organizers, participants, and sponsors for their time and resources and hope to have provided a useful glimpse into our solution for ADAM creation within the end-to-end clinical data analysis open source R framework that the Pharmaverse aims to provide.\nAs always, we are very happy to hear more feedback on the hackathon as well as on admiral in general. Simply submit an issue on the admiral GitHub repository. You would like to join the admiral core developers? Please reach out to Edoardo Mancini (product owner) or Ben Straub (technical lead)."
  },
  {
    "objectID": "posts/2023-06-27_hackathon_writeup/index.html#last-updated",
    "href": "posts/2023-06-27_hackathon_writeup/index.html#last-updated",
    "title": "Admiral Hackathon 2023 Revisited",
    "section": "Last updated",
    "text": "Last updated\n\n2023-07-10 18:50:37.234481"
  },
  {
    "objectID": "posts/2023-06-27_hackathon_writeup/index.html#details",
    "href": "posts/2023-06-27_hackathon_writeup/index.html#details",
    "title": "Admiral Hackathon 2023 Revisited",
    "section": "Details",
    "text": "Details\n\nsource code, R environment"
  },
  {
    "objectID": "posts/2023-06-27_admiral/valuelevel/derive_param_computed.html",
    "href": "posts/2023-06-27_admiral/valuelevel/derive_param_computed.html",
    "title": "Derive a new parameter computed from the value of other parameters",
    "section": "",
    "text": "When creating ADaM Basic Data Structure (BDS) datasets, we often encounter deriving a new parameter based on the analysis values (e.g., AVAL) of other parameters.\nThe admiral function derive_param_computed() adds a parameter computed from the analysis value of other parameters.\nIt works like a calculator to derive new records without worrying about merging and combining datasets, all you need is a derivation formula, which also improves the readability of the code."
  },
  {
    "objectID": "posts/2023-06-27_admiral/valuelevel/derive_param_computed.html#introduction",
    "href": "posts/2023-06-27_admiral/valuelevel/derive_param_computed.html#introduction",
    "title": "Derive a new parameter computed from the value of other parameters",
    "section": "",
    "text": "When creating ADaM Basic Data Structure (BDS) datasets, we often encounter deriving a new parameter based on the analysis values (e.g., AVAL) of other parameters.\nThe admiral function derive_param_computed() adds a parameter computed from the analysis value of other parameters.\nIt works like a calculator to derive new records without worrying about merging and combining datasets, all you need is a derivation formula, which also improves the readability of the code."
  },
  {
    "objectID": "posts/2023-06-27_admiral/valuelevel/derive_param_computed.html#example",
    "href": "posts/2023-06-27_admiral/valuelevel/derive_param_computed.html#example",
    "title": "Derive a new parameter computed from the value of other parameters",
    "section": "Example",
    "text": "Example\nA value level validation use case, where derive_param_computed() is used to validate a derived parameter - PARAMCD = ADPCYMG (Actual Dose per Cycle) in ADEX dataset.\n\nDerivation\nActual Dose per Cycle is derived from the Total Amount of Dose (PARAMCD = TOTDOSE) / Number of Cycles (PARAMCD = NUMCYC)\nIn this example, ADEX.AVAL when ADEX.PARAMCD = ADPCYMG can be derived as:\n\\[\nAVAL (PARAMCD = ADPCYMG) = \\frac{AVAL (PARAMCD = TOTDOSE)}{AVAL (PARAMCD = NUMCYC)}\n\\]\n\n\nLoading Packages and Creating Example Data\n\nlibrary(tibble)\nlibrary(dplyr)\nlibrary(diffdf)\nlibrary(admiral)\n\nadex &lt;- tribble(\n  ~USUBJID,  ~PARAMCD,  ~PARAM,                       ~AVAL,\n  \"101\",     \"TOTDOSE\", \"Total Amount of Dose (mg)\",  180,\n  \"101\",     \"NUMCYC\",  \"Number of Cycles\",           3\n)\n\n\n\nDerive New Parameter\n\nadex_admiral &lt;- derive_param_computed(\n  adex,\n  by_vars = exprs(USUBJID),\n  parameters = c(\"TOTDOSE\", \"NUMCYC\"),\n  analysis_value = AVAL.TOTDOSE / AVAL.NUMCYC,\n  set_values_to = exprs(\n    PARAMCD = \"ADPCYMG\",\n    PARAM = \"Actual Dose per Cycle (mg)\"\n  )\n)\n\n\n\n# A tibble: 3 × 4\n  USUBJID PARAMCD PARAM                       AVAL\n  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;                      &lt;dbl&gt;\n1 101     TOTDOSE Total Amount of Dose (mg)    180\n2 101     NUMCYC  Number of Cycles               3\n3 101     ADPCYMG Actual Dose per Cycle (mg)    60\n\n\n\n\nCompare\nFor validation purpose, the diffdf package is used below to mimic SAS proc compare.\n\nadex_expected &lt;- bind_rows(\n  adex,\n  tribble(\n    ~USUBJID,  ~PARAMCD,  ~PARAM,                       ~AVAL,\n    \"101\",     \"ADPCYMG\", \"Actual Dose per Cycle (mg)\", 60\n  )\n)\n\ndiffdf(adex_expected, adex_admiral, keys = c(\"USUBJID\", \"PARAMCD\"))\n\nNo issues were found!"
  },
  {
    "objectID": "posts/2023-06-27_admiral/valuelevel/derive_param_computed.html#last-updated",
    "href": "posts/2023-06-27_admiral/valuelevel/derive_param_computed.html#last-updated",
    "title": "Derive a new parameter computed from the value of other parameters",
    "section": "Last updated",
    "text": "Last updated\n\n2023-07-10 18:50:32.343356"
  },
  {
    "objectID": "posts/2023-06-27_admiral/valuelevel/derive_param_computed.html#details",
    "href": "posts/2023-06-27_admiral/valuelevel/derive_param_computed.html#details",
    "title": "Derive a new parameter computed from the value of other parameters",
    "section": "Details",
    "text": "Details\n\nsource code, R environment"
  },
  {
    "objectID": "posts/2023-07-10_blanks_and_nas/blanks_and_nas.html",
    "href": "posts/2023-07-10_blanks_and_nas/blanks_and_nas.html",
    "title": "Blanks and NAs",
    "section": "",
    "text": "Reading in SAS-based datasets (.sas7bdat or xpt) into R has users calling the R package haven. A typical call might invoke read_sas() or read_xpt() to bring in your source data to construct your ADaMs or SDTMs.\nUnfortunately, while using haven the character blanks (missing data) found in a typical SAS-based dataset are left as blanks. These blanks will typically prove problematic while using functions like is.na in combination with dplyr::filter() to subset data. Check out Bayer’s SAS2R catalog: handling-of-missing-values for more discussion on missing values and NAs.\nIn the admiral package, we have built a simple function called convert_blanks_to_na() to help us quickly remedy this problem. You can supply an entire dataframe to this function and it will convert any character blanks to NA_character_"
  },
  {
    "objectID": "posts/2023-07-10_blanks_and_nas/blanks_and_nas.html#loading-packages-and-making-dummy-data",
    "href": "posts/2023-07-10_blanks_and_nas/blanks_and_nas.html#loading-packages-and-making-dummy-data",
    "title": "Blanks and NAs",
    "section": "Loading Packages and Making Dummy Data",
    "text": "Loading Packages and Making Dummy Data\n\nlibrary(admiral)\nlibrary(tibble)\nlibrary(dplyr)\n\ndf &lt;- tribble(\n  ~USUBJID, ~RFICDTC,\n  \"01\", \"2000-01-01\",\n  \"02\", \"2001-01-01\",\n  \"03\", \"\", # Here we have a character blank\n  \"04\", \"2001-01--\",\n  \"05\", \"2001---01\",\n  \"05\", \"\", # Here we have a character blank\n)\n\ndf\n\n# A tibble: 6 × 2\n  USUBJID RFICDTC     \n  &lt;chr&gt;   &lt;chr&gt;       \n1 01      \"2000-01-01\"\n2 02      \"2001-01-01\"\n3 03      \"\"          \n4 04      \"2001-01--\" \n5 05      \"2001---01\" \n6 05      \"\""
  },
  {
    "objectID": "posts/2023-07-10_blanks_and_nas/blanks_and_nas.html#a-simple-conversion",
    "href": "posts/2023-07-10_blanks_and_nas/blanks_and_nas.html#a-simple-conversion",
    "title": "Blanks and NAs",
    "section": "A simple conversion",
    "text": "A simple conversion\n\ndf_na &lt;- convert_blanks_to_na(df)\n\ndf_na\n\n# A tibble: 6 × 2\n  USUBJID RFICDTC   \n  &lt;chr&gt;   &lt;chr&gt;     \n1 01      2000-01-01\n2 02      2001-01-01\n3 03      &lt;NA&gt;      \n4 04      2001-01-- \n5 05      2001---01 \n6 05      &lt;NA&gt;      \n\n\n\ndf_na %&gt;% filter(is.na(RFICDTC))\n\n# A tibble: 2 × 2\n  USUBJID RFICDTC\n  &lt;chr&gt;   &lt;chr&gt;  \n1 03      &lt;NA&gt;   \n2 05      &lt;NA&gt;"
  },
  {
    "objectID": "posts/2023-07-10_blanks_and_nas/blanks_and_nas.html#thats-it",
    "href": "posts/2023-07-10_blanks_and_nas/blanks_and_nas.html#thats-it",
    "title": "Blanks and NAs",
    "section": "That’s it!",
    "text": "That’s it!\nA simple call to this function can make your derivation life so much easier while working in R if working with SAS-based datasets. In admiral, we make use of this function at the start of all ADaM templates for common ADaM datasets. You can use the function use_ad_template() to get the full R script for the below ADaMs.\n\nlist_all_templates()\n\nExisting ADaM templates in package 'admiral':\n• ADAE\n• ADCM\n• ADEG\n• ADEX\n• ADLB\n• ADLBHY\n• ADMH\n• ADPC\n• ADPP\n• ADPPK\n• ADSL\n• ADVS"
  },
  {
    "objectID": "posts/2023-07-10_blanks_and_nas/blanks_and_nas.html#last-updated",
    "href": "posts/2023-07-10_blanks_and_nas/blanks_and_nas.html#last-updated",
    "title": "Blanks and NAs",
    "section": "Last updated",
    "text": "Last updated\n\n2023-07-10 18:50:28.92922"
  },
  {
    "objectID": "posts/2023-07-10_blanks_and_nas/blanks_and_nas.html#details",
    "href": "posts/2023-07-10_blanks_and_nas/blanks_and_nas.html#details",
    "title": "Blanks and NAs",
    "section": "Details",
    "text": "Details\n\nsource code, R environment"
  },
  {
    "objectID": "R/readme.html",
    "href": "R/readme.html",
    "title": "Files in this folder",
    "section": "",
    "text": "Some of these files help in creating/developing blog-posts, others are used by our CICD pipeline.\n\ncreate_blogpost.R: use this script to create a new blogpost based on our blogpost template.\nCICD.R: use this script to spellcheck and stylecheck your blogpost.\n\n\n\n\nhelp_create_blogpost.R: script containing the function(s) used by create_blogpost.R\nswitch.R: Used by CICD spellcheck workflow."
  },
  {
    "objectID": "R/readme.html#development-files",
    "href": "R/readme.html#development-files",
    "title": "Files in this folder",
    "section": "",
    "text": "help_create_blogpost.R: script containing the function(s) used by create_blogpost.R\nswitch.R: Used by CICD spellcheck workflow."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Pharmaverse Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nBlanks and NAs\n\n\n\n\n\n\n\nadmiral\n\n\n\n\nReading SAS datasets into R. The data is not always as it seems!\n\n\n\n\n\n\nJul 10, 2023\n\n\nBen Straub\n\n\n\n\n\n\n  \n\n\n\n\nfalcon\n\n\n\n\n\n\n\nfalcon\n\n\ndisplays\n\n\n\n\n\n\n\n\n\n\n\nJul 9, 2023\n\n\nVincent Shen\n\n\n\n\n\n\n  \n\n\n\n\nHello pharmaverse\n\n\n\n\n\n\n\ncommunity\n\n\n\n\nShort, fun and user-driven content around the pharmaverse.\n\n\n\n\n\n\nJun 28, 2023\n\n\nBen Straub\n\n\n\n\n\n\n  \n\n\n\n\nHackathon Feedback Application\n\n\n\n\n\n\n\nR\n\n\nshiny\n\n\ncommunity\n\n\nadmiral\n\n\n\n\nGoing through the process of creating a shiny app for the admiral hackathon. The shiny app allows users to check their solutions autonomously, gives feedback, and rates their results.\n\n\n\n\n\n\nJun 27, 2023\n\n\nStefan Thoma\n\n\n\n\n\n\n  \n\n\n\n\nDerive a new parameter computed from the value of other parameters\n\n\n\n\n\n\n\nadmiral\n\n\n\n\nUse admiral::derive_param_computed() like a calculator to derive new parameters/rows based on existing ones\n\n\n\n\n\n\nJun 27, 2023\n\n\nKangjie Zhang\n\n\n\n\n\n\n  \n\n\n\n\nAdmiral Hackathon 2023 Revisited\n\n\n\n\n\n\n\ncommunity\n\n\nadmiral\n\n\n\n\nLet’s have a look at the Admiral Hackathon 2023 together.\n\n\n\n\n\n\nJun 27, 2023\n\n\nStefan Thoma\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2023-06-27__hackathon_app/index.html",
    "href": "posts/2023-06-27__hackathon_app/index.html",
    "title": "Hackathon Feedback Application",
    "section": "",
    "text": "We recently created a shiny application for the admiral hackathon in February 2023. The admiral hackathon was an event designed to make statistical programmers from the pharmaceutical industry more comfortable with the admiral R package which allows users to efficiently transform data from one data standard (SDTM) to another (ADaM).\nHackathon participants formed groups of up to five people and were then tasked to create R-scripts that map the SDTM data to ADaM according to specifics defined in the metadata.\nThe purpose of the shiny app was threefold:\nIn this blog post I want to highlight some of the thoughts that went into this application. Please keep in mind that this work was done under tight time restraints.\nThe hackathon application is still online (although data-upload is switched off) and the GitHub repository is publicly available. The application is embedded into this post right after this paragraph. I have also uploaded to GitHub a .zip file of the workspace to which hackathon participants had access via posit cloud. For more context you can watch recordings of the hackathon-meetings."
  },
  {
    "objectID": "posts/2023-06-27__hackathon_app/index.html#permanent-data",
    "href": "posts/2023-06-27__hackathon_app/index.html#permanent-data",
    "title": "Hackathon Feedback Application",
    "section": "Permanent Data",
    "text": "Permanent Data\nThe biggest challenge you have to consider for this app is the permanent data storage. Shiny apps run on a server. Although we can write files on this server, whenever the app restarts, the files are lost. Therefore, a persistent data storage solution is required.\n\nGoogle drive\nI decided to leverage Google drive using the googledrive package package. This allowed me to save structured data (the team registry and the submission scores) as well as unstructured data (their R-script files).\n\n\n\n\n\n\nAuthentication\n\n\n\nTo access Google drive using the googledrive package we need to authenticate. This can be done interactively using the command googledrive::drive_auth() which takes you to the Google login page. After login you receive an authentication token requested by R.\nFor non-interactive authentication this token must be stored locally. In our case where the shiny app must access the token once deployed, the token must be stored on the project level.\nI have included the authentication procedure I followed in the R folder in google_init.R. You can find more extensive documentation of the non-interactive authentication.\n\n\nThe initial concept was: Each team gets their own folder including the most recent submission for each task, and a .csv file containing team information. To keep track of the submissions and the respective scores we wrote a .csv file in the mock-hackathon folder, so one folder above the team folders.\nSaving the team info as a .csv file worked fine as each team received their own file which – once created – was not touched anymore. As each upload for every team should simply add a row to the submissions.csv file, appending the file would be ideal. This was not possible using the googledrive package package. Instead, for each submission, the submissions file was downloaded, appended, and uploaded again. Unfortunately, this lead to a data loss, as the file was continuously overwritten, especially when two teams would submit simultaneously.\n\n\n\n\n\n\nRecover the Lost Data\n\n\n\nWhenever the submissions.csv file was uploaded, the previous version was sent to the Google drive bin. We ended up with over 3000 submissions.csv files containing a lot of redundant information. I had to write the following chunk to first get the unique file IDs of the 3000 submissions.csv files, create an empty submissions data-frame, and then download each file and add its information to the submisisons data-frame. To keep the data-frame as light as possible, after each append I deleted all duplicate submissions.\n\n# get all task_info.csv ID's\n# each row identifies one file in the trash\ntask_info_master &lt;- drive_find(\n  pattern = \"task_info.csv\",\n  trashed = TRUE\n)\n\n\n# set up empty df to store all submissions\norigin &lt;- tibble(\n  score = numeric(),\n  task = character(),\n  team = character(),\n  email = character(),\n  time = character()\n)\n\n# downloads, reads, and returns one csv file given a file id\nget_file &lt;- function(row) {\n  tf &lt;- tempfile()\n  row %&gt;%\n    as_id() %&gt;%\n    drive_download(path = tf)\n  new &lt;- read_csv(tf) %&gt;%\n    select(score, task, team) %&gt;%\n    distinct()\n}\n\n\n# quick and dirty for loop to subsequently download each file, extract information\n#  merge with previous information and squash it (using distinct()).\nfor (i in 1:nrow(task_info_master)) {\n  origin &lt;- rbind(origin, get_file(row = task_info_master[i, ])) %&gt;%\n    distinct()\n\n  # save progress in a separate file after every 100 downloaded and merged sheets\n  if (i %% 100 == 0) {\n    print(i)\n    write_csv(origin, paste(\"prog_data/task_info_prog_\", i, \".csv\", sep = \"\"))\n    # update on progress\n    message(i / nrow(task_info_master) * 100)\n  }\n}\n\nWhen doing such a time-intensive task, make sure to try it first with only a couple of files to see whether any errors are produced. I am not quite sure how long this took but when I returned from my lunch break everything had finished.\n\n\nIf you want to stay in the Google framework, I recommend using the googlesheets4 package for structured data. googlesheets4 allows appending new information to an already existing sheet without the need to download the file first. As both packages follow the same style, going from one to the other is really simple. googlesheets4 requires authentication as well. However, you can reuse the cached token from the googledrive package authentication by setting gs4_auth(token = drive_token()).\n\n\nSecurity Concerns\nConnecting a public shiny app to your Google account introduces a security vulnerability in general. Especially so because we implemented the upload of files to Google drive. And even more problematic: We run a user generated script and display some of its output. A malicious party might be able to extract the authentication token of our Google account or could upload malware to the drive.\nTo reduce the risk, I simply created an un-associated Google account to host the drive. There are certainly better options available, but this seemed a reasonable solution achieved with very little effort."
  },
  {
    "objectID": "posts/2023-06-27__hackathon_app/index.html#register-team",
    "href": "posts/2023-06-27__hackathon_app/index.html#register-team",
    "title": "Hackathon Feedback Application",
    "section": "Register Team",
    "text": "Register Team\nWe wanted to allow users to sign up as teams using the shiny app. The app provides a simple interface where users could input a team name and the number of members. This in turn would open two fields for each user to input their name and email address.\nWe do simple checks to make sure at least one valid email address is supplied, and that the group name is acceptable. The group name cannot be empty, already taken, or contain vulgar words.\nThe team registration itself was adding the team information to the Google sheets file event_info into the sheet teams and to create a team folder in which to store the uploaded R files.\nThe checks and registration is implemented in the register_team() function stored in interact_with_google.R.\n\n\n\nScreenshot of the register team interface\n\n\nThe challenge here was to adapt the number of input fields depending on the number of team members. This means that the team name and email interface must be rendered: First, we check how many team members are part of the group, this is stored in the input$n_members input variable. Then we create a tagList with as many elements as team members. Each element contains two columns, one for the email, one for the member name. This tagList is then returned and displayed to the user.\n\n# render email input UI of the register tab\noutput$name_email &lt;- shiny::renderUI({\n  # create field names\n  N &lt;- input$n_members\n  NAME &lt;- sapply(1:N, function(i) {\n    paste0(\"name\", i)\n  })\n  EMAIL &lt;- sapply(1:N, function(i) {\n    paste0(\"email\", i)\n  })\n\n  output &lt;- tagList()\n\n\n  firstsecondthird &lt;- c(\"First\", \"Second\", \"Third\", \"Fourth\", \"Fifth\")\n  for (i in 1:N) {\n    output[[i]] &lt;- tagList()\n    output[[i]] &lt;- fluidRow(\n      shiny::h4(paste(firstsecondthird[i], \" Member\")),\n      column(6,\n        textInput(NAME[i], \"Name\"),\n        value = \" \" # displayed default value\n      ),\n      column(6,\n        textInput(EMAIL[i], \"Email\"),\n        value = \" \"\n      )\n    )\n  }\n  output\n})\n\nThe team information is then uploaded to Google drive. Because some teams have more members than others, we have to create the respective data-frame with the number of team members in mind.\nThe following chunk creates the registration data. Noteworthy here the creation of the NAME and EMAIL variables which depend on the number of members in this team. Further, the user input of these fields is extracted via input[[paste0(NAME[i])]] within a for-loop.\nWe also make the data-creation dependent on the press of the Register Group button and cache some variables.\n\n## registration\nregistrationData &lt;-\n  reactive({\n    N &lt;- input$n_members\n    NAME &lt;- sapply(1:N, function(i) {\n      paste0(\"name\", i)\n    })\n    EMAIL &lt;- sapply(1:N, function(i) {\n      paste0(\"email\", i)\n    })\n    names &lt;- character(0)\n    emails &lt;- character(0)\n\n    for (i in 1:N) {\n      names[i] &lt;- input[[paste0(NAME[i])]]\n      emails[i] &lt;- input[[paste0(EMAIL[i])]]\n    }\n    # create df\n    dplyr::tibble(\n      team_name = input$team_name,\n      n_members = N,\n      member_name = names,\n      member_email = emails\n    )\n  }) %&gt;%\n  bindCache(input$team_name, input$n_members, input$name1, input$email1) %&gt;%\n  bindEvent(input$register) # wait for button press"
  },
  {
    "objectID": "posts/2023-06-27__hackathon_app/index.html#upload-source-script",
    "href": "posts/2023-06-27__hackathon_app/index.html#upload-source-script",
    "title": "Hackathon Feedback Application",
    "section": "Upload & Source Script",
    "text": "Upload & Source Script\nTo upload a script, participants had to select their team first. The input options were based on the existing folders on the Google-drive in the mock_hackathon folder. To upload a particular script participants had to also select the task to be solved. The uploaded script is then uploaded to the team folder following a standardised script naming convention.\nThere are different aspects to be aware of when sourcing scripts on a shiny server. For example, you have to anticipate the packages users will include in their uploaded scripts, as their scripts will load but not install packages. Further, you should keep the global environment of your shiny app separate from the environment in which the script is sourced. This is possible by supplying an environment to the source() function, e.g: source(path_to_script, local = new.env())\nAnother thing we had to consider was to replicate the exact folder-structure on the shiny server that participants were working with when creating the scripts, as they were required to source some scripts and to save their file into a specific folder. This was relatively straight forward as we provided participants with a folder structure in the posit cloud instance they were using. They had access to the sdtm folder in which the data was stored, and the adam folder into which they saved their solutions. The structure also included a folder with metadata which was also available on the shiny server.\nFor some tasks, participants required some ADaM-datasets stored in the adam folder, essentially the output from previous tasks. This was achieved by first creating a list mapping tasks to the required ADaM datasets:\n\ndepends_list &lt;- list(\n  \"ADADAS\" = c(\"ADSL\"),\n  \"ADAE\" = c(\"ADSL\"),\n  \"ADLBC\" = c(\"ADSL\"),\n  \"ADLBH\" = c(\"ADSL\"),\n  \"ADLBHY\" = c(\"ADSL\"),\n  \"ADSL\" = NULL,\n  \"ADTTE\" = c(\"ADSL\", \"ADAE\"),\n  \"ADVS\" = c(\"ADSL\")\n)\n\nThis list is sourced from the R/parameters.R file when initiating the application. We then call the get_depends() function sourced from R/get_depends.R which copies the required files from the key folder (where our solutions to the tasks were stored) to the adam folder. After sourcing the uploaded script the content in the adam folder is deleted."
  },
  {
    "objectID": "posts/2023-06-27__hackathon_app/index.html#compare-to-solution-file",
    "href": "posts/2023-06-27__hackathon_app/index.html#compare-to-solution-file",
    "title": "Hackathon Feedback Application",
    "section": "Compare to Solution File",
    "text": "Compare to Solution File\nWe want to compare the file created by participants with our solution (key) file stored in the key folder. The diffdf::diffdf() function allows for easy comparison of two data-frames and directly provides extensive feedback for the user:\n\nlibrary(dplyr)\ndf1 &lt;- tibble(\n  numbers = 1:10,\n  letters = LETTERS[1:10]\n)\ndf2 &lt;- tibble(\n  numbers = 1:10,\n  letters = letters[1:10]\n)\n\ndiffdf::diffdf(df1, df2)\n\nWarning in diffdf::diffdf(df1, df2): \nNot all Values Compared Equal\n\n\nDifferences found between the objects!\n\nA summary is given below.\n\nNot all Values Compared Equal\nAll rows are shown in table below\n\n  =============================\n   Variable  No of Differences \n  -----------------------------\n   letters          10         \n  -----------------------------\n\n\nAll rows are shown in table below\n\n  ========================================\n   VARIABLE  ..ROWNUMBER..  BASE  COMPARE \n  ----------------------------------------\n   letters         1         A       a    \n   letters         2         B       b    \n   letters         3         C       c    \n   letters         4         D       d    \n   letters         5         E       e    \n   letters         6         F       f    \n   letters         7         G       g    \n   letters         8         H       h    \n   letters         9         I       i    \n   letters        10         J       j    \n  ----------------------------------------"
  },
  {
    "objectID": "posts/2023-06-27__hackathon_app/index.html#score",
    "href": "posts/2023-06-27__hackathon_app/index.html#score",
    "title": "Hackathon Feedback Application",
    "section": "Score",
    "text": "Score\nTo compare submissions between participants we implemented a simple scoring function (score_f()) based on the table comparison by diffdf(). The function can be found in the compare_dfs.R file:\n\nscore_f &lt;- function(df_user, df_key, keys) {\n  score &lt;- 10\n  diff &lt;- diffdf::diffdf(df_user, df_key, keys = keys)\n  if (!diffdf::diffdf_has_issues(diff)) {\n    return(score)\n  }\n\n  # check if there are any differences if the comparison is not strict:\n  if (!diffdf::diffdf_has_issues(diffdf::diffdf(df_user,\n    df_key,\n    keys = keys,\n    strict_numeric = FALSE,\n    strict_factor = FALSE\n  ))) {\n    # if differences are not strict, return score - 1\n    return(score - 1)\n  }\n\n  return(round(min(max(score - length(diff) / 3, 1), 9), 2))\n}\n\nEvery comparison starts with a score of 10. We then subtract the length of the comparison object divided by a factor of 3. The length of the comparison object is a simplified way to represent the difference between the two data-frames by one value. Finally, the score is bounded by 1 using max(score, 1).\nThe score is not a perfect capture of the quality of the script uploaded but: 1. helped participants get an idea of how close their data-frame is to the solution file 2. allowed us to raffle prizes based on the merit of submitted r-scripts"
  },
  {
    "objectID": "posts/2023-06-27__hackathon_app/index.html#reactiveness",
    "href": "posts/2023-06-27__hackathon_app/index.html#reactiveness",
    "title": "Hackathon Feedback Application",
    "section": "Reactiveness",
    "text": "Reactiveness\nSome of the app functions can take quite some time to execute, e.g. running the uploaded script. Other tasks, e.g. registering a team, do not intrinsically generate user facing outputs. This would make the app using really frustrating, as users would not know whether the app is correctly working or whether it froze.\nWe implemented two small features that made the app more responsive. One is simple loading icons that integrate into the user interface and show that output is being computed – that something is working. The other is a pop up window which communicates whether team registration was successful, and if not, why not.\nWe further aimed to forward errors generated by the uploaded scripts to the user interface, but errors generated by the application itself should be concealed."
  },
  {
    "objectID": "posts/2023-06-27__hackathon_app/index.html#conclusion",
    "href": "posts/2023-06-27__hackathon_app/index.html#conclusion",
    "title": "Hackathon Feedback Application",
    "section": "Conclusion",
    "text": "Conclusion\nAlthough the application was continuously improved during the hackathon it proved to be a useful resource for participants from day one as it allowed groups to set their own pace. It further allowed admiral developers to gain insights on package usage of a relatively large sample of potential end users. From our perspective, the application provided a great added value to the hackathon and eased the workload of guiding the participants through all the tasks."
  },
  {
    "objectID": "posts/2023-06-27__hackathon_app/index.html#last-updated",
    "href": "posts/2023-06-27__hackathon_app/index.html#last-updated",
    "title": "Hackathon Feedback Application",
    "section": "Last updated",
    "text": "Last updated\n\n2023-07-10 18:50:26.456766"
  },
  {
    "objectID": "posts/2023-06-27__hackathon_app/index.html#details",
    "href": "posts/2023-06-27__hackathon_app/index.html#details",
    "title": "Hackathon Feedback Application",
    "section": "Details",
    "text": "Details\n\nsource code, R environment"
  },
  {
    "objectID": "posts/2023-07-09_falcon/falcon.html",
    "href": "posts/2023-07-09_falcon/falcon.html",
    "title": "falcon",
    "section": "",
    "text": "The {falcon} initiative is an industry collaborative effort under {pharmaverse} that unites Boehringer Ingelheim, Moderna, Roche, and Sanofi with the aspiration of building and open-sourcing a comprehensive catalog of harmonized tables, listings, and graphs (TLGs) for clinical study reporting. By leveraging existing open-source R packages, {falcon} aims to simplify the process of output review, comparison, and meta-analyses, while fostering efficient communication among stakeholders in the pharmaceutical industry."
  },
  {
    "objectID": "posts/2023-07-09_falcon/falcon.html#what-is-falcon",
    "href": "posts/2023-07-09_falcon/falcon.html#what-is-falcon",
    "title": "falcon",
    "section": "",
    "text": "The {falcon} initiative is an industry collaborative effort under {pharmaverse} that unites Boehringer Ingelheim, Moderna, Roche, and Sanofi with the aspiration of building and open-sourcing a comprehensive catalog of harmonized tables, listings, and graphs (TLGs) for clinical study reporting. By leveraging existing open-source R packages, {falcon} aims to simplify the process of output review, comparison, and meta-analyses, while fostering efficient communication among stakeholders in the pharmaceutical industry."
  },
  {
    "objectID": "posts/2023-07-09_falcon/falcon.html#why-do-we-build-it",
    "href": "posts/2023-07-09_falcon/falcon.html#why-do-we-build-it",
    "title": "falcon",
    "section": "Why do we build it?",
    "text": "Why do we build it?\nThe collaborative effort focuses on improving the clarity, consistency, and accessibility of TLGs by addressing variations and redundancies in their creation and use. This harmonized approach allows for streamlined reporting processes and facilitates effective communication of study results within the industry and to regulatory authorities."
  },
  {
    "objectID": "posts/2023-07-09_falcon/falcon.html#what-has-been-done-so-far",
    "href": "posts/2023-07-09_falcon/falcon.html#what-has-been-done-so-far",
    "title": "falcon",
    "section": "What has been done so far?",
    "text": "What has been done so far?\nDrawing inspiration from the FDA Standard Safety Tables and Figures Integrated Guide, the {falcon} initiative has successfully developed and open-sourced 11 templates to date. 4 product owners and 11 developers from 4 companies have collaborated to make these templates available and also published them on the official {falcon} website at https://pharmaverse.github.io/falcon/."
  },
  {
    "objectID": "posts/2023-07-09_falcon/falcon.html#next-steps-vision",
    "href": "posts/2023-07-09_falcon/falcon.html#next-steps-vision",
    "title": "falcon",
    "section": "Next steps & vision",
    "text": "Next steps & vision\nFuture plans for {falcon} involve expanding the catalog through continuous collaboration from participating companies and inviting wider industry engagement. The ultimate goal is to promote harmonization of TLGs for clinical reporting across the pharmaceutical industry, leading to greater efficiency, collaboration, and innovation. Even though templates currently come from a published FDA guide, the collaborating companies are open to share and discuss similarities and differences on analysis concepts and output layouts of their own implementations in clinical reporting, for both safety and efficacy analyses.\nIn addition, while currently all templates were built using {rtables}, {tern}, {rlistings} and drew inspiration from the open-sourced TLG-Catalog, moving forward, we plan to support creating the same templates using alternative table engines such as {gt}.\n{falcon} will be presented at the upcoming PHUSE EU (Standards Implementation stream), where we will share the collaboration journey of {falcon} so far, providing more details on the current progress, long-term vision, and strategies for this initiative. Attendees will gain insights into the challenges and opportunities of harmonizing clinical reporting through open-source collaboration and learn about the potential benefits and future direction of {falcon}."
  },
  {
    "objectID": "posts/2023-07-09_falcon/falcon.html#last-updated",
    "href": "posts/2023-07-09_falcon/falcon.html#last-updated",
    "title": "falcon",
    "section": "Last updated",
    "text": "Last updated\n\n2023-07-10 18:50:30.365514"
  },
  {
    "objectID": "posts/2023-07-09_falcon/falcon.html#details",
    "href": "posts/2023-07-09_falcon/falcon.html#details",
    "title": "falcon",
    "section": "Details",
    "text": "Details\n\nsource code, R environment"
  },
  {
    "objectID": "posts/2023-06-28_welcome/index.html",
    "href": "posts/2023-06-28_welcome/index.html",
    "title": "Hello pharmaverse",
    "section": "",
    "text": "The communications working group (CWG) seeks to promote and showcase how R can be used in the Clinical Reporting pipeline through short and informative blog posts. These posts will be hosted on this pharmaverse blog and promoted on the pharmaverse slack channels as well as on LinkedIn.\nAs the CWG is a small team, we hope to make the blog development process easy enough that pharmaverse community members will be able to easily write blog posts with guidance from the CWG team."
  },
  {
    "objectID": "posts/2023-06-28_welcome/index.html#purpose",
    "href": "posts/2023-06-28_welcome/index.html#purpose",
    "title": "Hello pharmaverse",
    "section": "",
    "text": "The communications working group (CWG) seeks to promote and showcase how R can be used in the Clinical Reporting pipeline through short and informative blog posts. These posts will be hosted on this pharmaverse blog and promoted on the pharmaverse slack channels as well as on LinkedIn.\nAs the CWG is a small team, we hope to make the blog development process easy enough that pharmaverse community members will be able to easily write blog posts with guidance from the CWG team."
  },
  {
    "objectID": "posts/2023-06-28_welcome/index.html#spirit-of-a-blog-post",
    "href": "posts/2023-06-28_welcome/index.html#spirit-of-a-blog-post",
    "title": "Hello pharmaverse",
    "section": "Spirit of a Blog Post",
    "text": "Spirit of a Blog Post\nThe CWG believes that the following 4 points will help guide the creation of Blog Posts.\n\nShort\nPersonalized\nReproducible\nReadable\n\nShort: Posts should aim to be under a 10 minute read. We encourage longer posts to be broken up into multiple posts.\nPersonalized: Posts should have a personality! For example, a person wishing to post on a function in a package needs to differentiate the post from the documentation for function, i.e. we don’t want to just recycle the documentation. How can you add your voice and experience? A bit of cheeky language is also encouraged.\nReproducible: Posts should work with minimal dependencies with data, packages and outside sources. Every dependency introduced in a post adds some risk to the post longevity. As package dependencies change, posts should be built in a way that they can be updated to stay relevant.\nReadable: The CWG sees this site as more of introductory site rather advanced user site. Therefore, the CWG feels that code should be introduced in a way that promotes readability over complexity."
  },
  {
    "objectID": "posts/2023-06-28_welcome/index.html#what-types-of-posts-are-allowed-on-this-site",
    "href": "posts/2023-06-28_welcome/index.html#what-types-of-posts-are-allowed-on-this-site",
    "title": "Hello pharmaverse",
    "section": "What types of posts are allowed on this site?",
    "text": "What types of posts are allowed on this site?\nOverall, we want to stay focus on the Clinical Reporting Pipeline, which we see as the following topics:\n\nPackages in the Clinical Reporting Pipeline\nFunctions from packages in the Clinical Reporting Pipeline\nWider experiences of using R in the Clinical Reporting Pipeline\nConference experiences and the Clinical Reporting Pipeline\n\nHowever, it never hurts to ask if you topic might fit into this medium!\n\nMinimum Post Requirements\n\nA unique image to help showcase the post.\nWorking Code\nSelf-contained data or package data.\nDocumentation of package versions\n\nThat is it! After that you can go wild, but we do ask that it is kept short!"
  },
  {
    "objectID": "posts/2023-06-28_welcome/index.html#how-can-i-make-a-blog-post",
    "href": "posts/2023-06-28_welcome/index.html#how-can-i-make-a-blog-post",
    "title": "Hello pharmaverse",
    "section": "How can I make a Blog Post",
    "text": "How can I make a Blog Post\nStep 1: Reach out to us through pharmaverse/slack or make an issue on our GitHub.\nStep 2: Branch off main\nStep 3: Review the Spirit of the Blog Post in the Pull Request Template\nStep 4: Poke us to do a review!"
  },
  {
    "objectID": "posts/2023-06-28_welcome/index.html#last-updated",
    "href": "posts/2023-06-28_welcome/index.html#last-updated",
    "title": "Hello pharmaverse",
    "section": "Last updated",
    "text": "Last updated\n\n2023-07-10 18:50:33.766791"
  },
  {
    "objectID": "posts/2023-06-28_welcome/index.html#details",
    "href": "posts/2023-06-28_welcome/index.html#details",
    "title": "Hello pharmaverse",
    "section": "Details",
    "text": "Details\n\nsource code, R environment"
  }
]